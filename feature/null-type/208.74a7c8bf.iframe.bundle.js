"use strict";(self.webpackChunk_netcracker_qubership_apihub_apispec_view=self.webpackChunk_netcracker_qubership_apihub_apispec_view||[]).push([[208],{"../../node_modules/@netcracker/qubership-apihub-api-unifier/dist/index.cjs.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const qubershipApihubJsonCrawl=__webpack_require__("../../node_modules/@netcracker/qubership-apihub-json-crawl/dist/index.cjs.js"),fastEquals=__webpack_require__("../../node_modules/fast-equals/dist/fast-equals.js"),objectHash=__webpack_require__("../../node_modules/object-hash/dist/object_hash.js"),RefErrorTypes={RICH_REF_NOT_ALLOWED:"richRefObjectNotAllowed",REF_NOT_FOUND:"refNotFound",REF_NOT_VALID_FORMAT:"refNotValidFormat"},CURRENT_DATA_LEVEL="current-data-level",DEFAULT_OPTION_ORIGINS_FOR_DEFAULTS=[{parent:void 0,value:"#defaults"}],JSON_SCHEMA_NODE_TYPE_BOOLEAN="boolean",JSON_SCHEMA_NODE_TYPE_OBJECT="object",JSON_SCHEMA_NODE_TYPE_ARRAY="array",JSON_SCHEMA_NODE_TYPE_NUMBER="number",JSON_SCHEMA_NODE_TYPE_STRING="string",JSON_SCHEMA_NODE_TYPE_INTEGER="integer",JSON_SCHEMA_NODE_TYPE_NULL="null",JSON_SCHEMA_NODE_TYPES=["boolean","string","number","integer","object","array","null"],JSON_SCHEMA_NODE_SYNTHETIC_TYPES=["nothing","any"],JSON_SCHEMA_NODE_NORMALIZED_TYPES=[...JSON_SCHEMA_NODE_TYPES,...JSON_SCHEMA_NODE_SYNTHETIC_TYPES],JSON_SCHEMA_PROPERTY_TYPE="type",JSON_SCHEMA_PROPERTY_EXCLUSIVE_MAXIMUM="exclusiveMaximum",JSON_SCHEMA_PROPERTY_EXCLUSIVE_MINIMUM="exclusiveMinimum",JSON_SCHEMA_PROPERTY_MIN_LENGTH="minLength",JSON_SCHEMA_PROPERTY_MIN_ITEMS="minItems",JSON_SCHEMA_PROPERTY_UNIQUE_ITEMS="uniqueItems",JSON_SCHEMA_PROPERTY_MIN_PROPERTIES="minProperties",JSON_SCHEMA_PROPERTY_ITEMS="items",JSON_SCHEMA_PROPERTY_REQUIRED="required",JSON_SCHEMA_PROPERTY_PROPERTIES="properties",JSON_SCHEMA_PROPERTY_ADDITIONAL_PROPERTIES="additionalProperties",JSON_SCHEMA_PROPERTY_PATTERN_PROPERTIES="patternProperties",JSON_SCHEMA_PROPERTY_ALL_OF="allOf",JSON_SCHEMA_PROPERTY_ANY_OF="anyOf",JSON_SCHEMA_PROPERTY_NOT="not",JSON_SCHEMA_PROPERTY_NULLABLE="nullable",JSON_SCHEMA_PROPERTY_READ_ONLY="readOnly",JSON_SCHEMA_PROPERTY_WRITE_ONLY="writeOnly",JSON_SCHEMA_PROPERTY_DEPRECATED="deprecated",JSON_SCHEMA_PROPERTY_REF="$ref";function stringifyOrigins(origins,instanceMap,addInstances){return origins.map((origin=>{const path=[];let currentOrigin=origin;for(;currentOrigin;){let instanceNumber=instanceMap.get(currentOrigin);void 0===instanceNumber&&instanceMap.set(currentOrigin,instanceNumber=instanceMap.size);const inst=addInstances?`[${instanceNumber}]`:"";path.push(`${currentOrigin.value.toString()}${inst}`),currentOrigin=currentOrigin.parent}return path.reverse().join("/")}))}function concatenateArraysInProperty(source,target,propertyKey,originsFlag){const sourceArray=getJsoProperty(source,propertyKey);if(!qubershipApihubJsonCrawl.isArray(sourceArray))return;let targetArray=getJsoProperty(target,propertyKey);if(void 0===targetArray&&(targetArray=[],copyOrigins(source,target,propertyKey,propertyKey,originsFlag)),!qubershipApihubJsonCrawl.isArray(targetArray))return;setJsoProperty(target,propertyKey,targetArray);qubershipApihubJsonCrawl.anyArrayKeys(sourceArray).flatMap((key=>"number"==typeof key?[key]:[])).forEach((sourceKey=>{const targetIndex=targetArray.length;targetArray[targetIndex]=sourceArray[sourceKey],copyOrigins(sourceArray,targetArray,sourceKey,targetIndex,originsFlag)}))}function resolveOriginsMetaRecord(source,originsFlag){if(originsFlag)return getJsoProperty(source,originsFlag)}function resolveOrigins(source,propertyKey,originsFlag){const originsRecord=resolveOriginsMetaRecord(source,originsFlag);if(originsRecord)return originsRecord[propertyKey]}function copyProperty(source,target,propertyKey,originsFlag){setJsoProperty(target,propertyKey,getJsoProperty(source,propertyKey)),copyOrigins(source,target,propertyKey,propertyKey,originsFlag)}function copyOrigins(source,target,sourcePropertyKey,targetPropertyKey,originsFlag){if(!originsFlag)return;const sourceOriginsRecord=resolveOriginsMetaRecord(source,originsFlag);sourceOriginsRecord&&setOrigins(target,targetPropertyKey,originsFlag,sourceOriginsRecord[sourcePropertyKey])}function mergeOrigins(target,sources,originsFlag){if(!originsFlag)return;const newRecords=[target,...sources].reduce(((aggregator,jso)=>{const jsoOrigins=resolveOriginsMetaRecord(jso,originsFlag)??{};return Object.keys(jsoOrigins).forEach((propertyKey=>{let existingLeafs=aggregator[propertyKey];existingLeafs||(existingLeafs=[],aggregator[propertyKey]=existingLeafs),(jsoOrigins[propertyKey]??[]).filter((origin=>!existingLeafs.includes(origin))).forEach((origin=>existingLeafs.push(origin)))})),aggregator}),{});setJsoProperty(target,originsFlag,newRecords)}function setOrigins(jso,propertyKey,originsFlag,origins){if(!originsFlag)return;if(!origins)return;const newOriginsRecord={...resolveOriginsMetaRecord(jso,originsFlag)??{}};newOriginsRecord[propertyKey]=origins,setJsoProperty(jso,originsFlag,newOriginsRecord)}function cleanSeveralOrigins(jso,propertyKeys,originsFlag){if(!originsFlag)return;const originsRecord=resolveOriginsMetaRecord(jso,originsFlag);if(!originsRecord)return;if(!propertyKeys.some((key=>key in originsRecord)))return;const newOriginsRecord={...originsRecord};propertyKeys.forEach((key=>delete newOriginsRecord[key])),setJsoProperty(jso,originsFlag,newOriginsRecord)}function cleanOrigins(jso,propertyKey,originsFlag){cleanSeveralOrigins(jso,[propertyKey],originsFlag)}function cleanAllOrigins(jso,originsFlag){originsFlag&&setJsoProperty(jso,originsFlag,{})}function setOriginsForArray(array,originsFlag,originsArray){if(!originsFlag)return;const newOriginsRecord={...resolveOriginsMetaRecord(array,originsFlag)??{}};originsArray.forEach(((item,index)=>{item&&(newOriginsRecord[index]=item)})),setJsoProperty(array,originsFlag,newOriginsRecord)}function copyOriginsForArray(sourceArray,targetArray,originsFlag){if(!originsFlag)return;const sourceOriginsRecord=resolveOriginsMetaRecord(sourceArray,originsFlag);if(!sourceOriginsRecord)return;const newOriginsRecord={...resolveOriginsMetaRecord(targetArray,originsFlag)??{}};targetArray.forEach(((_,index)=>{newOriginsRecord[index]=sourceOriginsRecord[index]})),setJsoProperty(targetArray,originsFlag,newOriginsRecord)}const createSelfOriginsCloneHook=originsFlag=>createSelfMetaCloneHook("selfOriginResolver",originsFlag,[]);class MapArray extends Map{add(key,value){const arr=this.get(key);return arr?arr.push(value):this.set(key,[value]),this}}function isPossibleRawJsonSchema(value){const type=typeof value;return"boolean"===type||"object"===type}function isRefNode(value){return value&&"object"==typeof value&&JSON_SCHEMA_PROPERTY_REF in value&&value.$ref&&"string"==typeof value.$ref}function isPureRefNode(value){return isRefNode(value)&&1===Object.keys(value).length}function parseRef($ref,basePath=""){const[filePath=basePath,ref]=$ref.split("#"),pointer=ref&&"/"!==ref?ref:"";return{filePath,pointer,normalized:createRef(filePath,pointer),jsonPath:parsePointer(pointer)}}function createRef(basePath,pointer){return basePath?`${basePath}${pointer?"#"+pointer:""}`:pointer?`#${pointer}`:"#"}const resolveValueByPath=(obj,path)=>{let value=obj;for(const key of path){if(!qubershipApihubJsonCrawl.isObject(value)||!(key in value))return;if(value=value[key],void 0===value)return}return value},pathMask={slash:/\//g,tilde:/~/g,escapedSlash:/~1/g,escapedTilde:/~0/g};function parsePointer(pointer){return pointer.split("/").map((i=>decodeURIComponent(i.replace(pathMask.escapedSlash,"/").replace(pathMask.escapedTilde,"~")))).slice(1)}const findMultiplierForInteger=number=>{let multiplier=1;for(;number*multiplier%1!=0;)multiplier*=10;return multiplier};function calculateLCM(args){const x=args.reduce(((r,v)=>Math.max(r,findMultiplierForInteger(v))),0);return args.reduce(((a,b)=>Math.round(a*x*b*x/calculateGCD(a*x,b*x))/x))}function calculateGCD(a,b){return 0===b?a:calculateGCD(b,a%b)}function uniqueItems(arr){const added=new Set;return arr.filter((value=>!added.has(value)&&added.add(value)))}function stringifyCyclicJso(jso,options={}){return stringifyKeyValuePair("",jso,new Map,options)}function stringifyKeyValuePair(valuePrefix,value,instances,options){var _a,_b;if(null===value)return`${valuePrefix.toString()}null`;const valueType=typeof value;switch(valueType){case"string":return`${valuePrefix.toString()}'${value}'`;case"symbol":case"boolean":case"number":case"bigint":return`${valuePrefix.toString()}${value}`;case"undefined":return`${valuePrefix.toString()}undefined`;default:{let ref=instances.get(value);if(void 0!==ref)return`${valuePrefix.toString()}/*#${ref}*/`;if(ref=instances.size,instances.set(value,ref),"function"===valueType)return`${valuePrefix.toString()}/*${ref}*/ function()`;const indent2=valuePrefix.length-valuePrefix.trimStart().length,tab=" ",stringIndent=tab.repeat(indent2);if(qubershipApihubJsonCrawl.isArray(value)){const valueAsObject=value,extraInfo=null==(_a=options.jsoExtraInfo)?void 0:_a.call(options,valueAsObject),arrayExtraInfo=extraInfo?`  //${extraInfo}`:"",ownKeys=Reflect.ownKeys(valueAsObject).filter((k=>"length"!==k)),ending=0===ownKeys.length?`]${arrayExtraInfo}`:`\n${stringIndent}]`,strValue=ownKeys.filter((propertyKey=>!options.filter||options.filter(valueAsObject,propertyKey))).reduce(((result,propertyKey)=>{var _a2;const propertyValue=valueAsObject[propertyKey],pairInfo=(null==(_a2=options.pairExtraInfo)?void 0:_a2.call(options,valueAsObject,propertyKey))??"";return result+"\n"+stringifyKeyValuePair(/\d+/.test(propertyKey.toString())?`${stringIndent}${tab}`:`${stringIndent}${tab}/*${propertyKey.toString()}: */ `,propertyValue,instances,options)+",  //"+pairInfo}),"["+(0!==ownKeys.length?arrayExtraInfo:""))+ending;return`${valuePrefix.toString()}/*${ref}*/ ${strValue}`}{const valueAsObject=value,extraInfo=null==(_b=options.jsoExtraInfo)?void 0:_b.call(options,valueAsObject),objectExtraInfo=extraInfo?`  //${extraInfo}`:"",ownKeys=Reflect.ownKeys(valueAsObject),ending=0===ownKeys.length?`}${objectExtraInfo}`:`\n${stringIndent}}`,strValue=ownKeys.filter((propertyKey=>!options.filter||options.filter(valueAsObject,propertyKey))).reduce(((result,propertyKey)=>{var _a2;const propertyValue=valueAsObject[propertyKey],pairInfo=(null==(_a2=options.pairExtraInfo)?void 0:_a2.call(options,valueAsObject,propertyKey))??"";return result+"\n"+stringifyKeyValuePair(`${stringIndent}${tab}${propertyKey.toString()}: `,propertyValue,instances,options)+",  //"+pairInfo}),"{"+(0!==ownKeys.length?objectExtraInfo:""))+ending;return`${valuePrefix.toString()}/*${ref}*/ ${strValue}`}}}}function copyDescriptors(target,...sources){return sources.forEach((source=>{const descriptors=Object.keys(source).reduce(((descriptors2,key)=>{const descriptor=Object.getOwnPropertyDescriptor(source,key);return(null==descriptor?void 0:descriptor.enumerable)&&(descriptors2[key]=descriptor),descriptors2}),{});Object.getOwnPropertySymbols(source).forEach((sym=>{const descriptor=Object.getOwnPropertyDescriptor(source,sym);(null==descriptor?void 0:descriptor.enumerable)&&(descriptors[sym]=descriptor)})),Object.defineProperties(target,descriptors)})),target}function concatArrays$1(...args){return args.flatMap((value=>void 0===value?[]:qubershipApihubJsonCrawl.isArray(value)?value:[value]))}function replaceValue(reference,value){return{type:"replace",reference,value}}function insertIntoArrayByInstruction(arr,...instructions){return instructions.reduce(((items,instruction)=>items.flatMap((item=>{if(instruction.reference!==item)return[item];switch(instruction.type){case"after":return[item,instruction.value];case"before":return[instruction.value,item];case"replace":return[instruction.value]}}))),arr)}function singleOrArrayToArray(t){return qubershipApihubJsonCrawl.isArray(t)?t:[t]}function pathItemToFullPath(item){const path=[];let v=item;for(;v;)path.push(v.value),v=v.parent;const reverse=path.reverse();return reverse.length&&reverse[0]===qubershipApihubJsonCrawl.JSON_ROOT_KEY&&reverse.shift(),reverse}function getJsoProperty(ar,key){return ar[key]}function setJsoProperty(ar,key,value){ar[key]=value}function selfMetaResolverFactory(metaFlag,defaultMeta=void 0){return metaFlag?parent=>{if(!qubershipApihubJsonCrawl.isObject(parent))return()=>defaultMeta;let origins;return key=>(origins||(origins=parent[metaFlag]??{}),null==origins?void 0:origins[key])}:()=>()=>defaultMeta}function createSelfMetaCloneHook(stateProperty,metaFlag,defaultMeta=void 0){const factory=selfMetaResolverFactory(metaFlag,defaultMeta);return({value,state})=>qubershipApihubJsonCrawl.isObject(value)?{value,state:{...state,[stateProperty]:factory(value)}}:{value}}const removeDuplicatesWithMergeOrigins=(array,originFlag,equals)=>{const itemOriginsMap=new Map,uniqueItems2=array.filter(((item,index)=>{const origins=resolveOrigins(array,index,originFlag)??[],existedItemWithOrigins=((map,item)=>map.get(item)?[item,map.get(item)]:Array.from(map.entries()).find((([otherItem])=>equals(item,otherItem))))(itemOriginsMap,item);if(existedItemWithOrigins){const[existedItem,existedOrigins]=existedItemWithOrigins;return itemOriginsMap.set(existedItem,[...existedOrigins,...origins]),!1}return itemOriginsMap.set(item,origins)})),itemOrigins=uniqueItems2.map((item=>itemOriginsMap.get(item)));return setOriginsForArray(uniqueItems2,originFlag,itemOrigins),uniqueItems2},SPEC_TYPE_JSON_SCHEMA_04="json-schema-04",SPEC_TYPE_JSON_SCHEMA_06="json-schema-06",SPEC_TYPE_JSON_SCHEMA_07="json-schema-07",SPEC_TYPE_OPEN_API_30="openapi-3.0",SPEC_TYPE_OPEN_API_31="openapi-3.1",SPEC_TYPE_ASYNCAPI_2="asyncapi-2",SPEC_TYPE_GRAPH_API="graphapi";function resolveSpec(data){if(!qubershipApihubJsonCrawl.isObject(data))throw new Error("Spec must be an object");if(function isOpenApi(data){return qubershipApihubJsonCrawl.isObject(data)&&"openapi"in data&&"string"==typeof data.openapi&&data.openapi.length>0}(data)){if(data.openapi.startsWith("3.1"))return{type:SPEC_TYPE_OPEN_API_31,version:data.openapi};if(data.openapi.startsWith("3.0"))return{type:SPEC_TYPE_OPEN_API_30,version:data.openapi};throw new Error(`OpenApi version ${data.openapi} is not supported.`)}if(function isAsyncApi(data){return qubershipApihubJsonCrawl.isObject(data)&&"asyncapi"in data&&"string"==typeof data.asyncapi&&data.asyncapi.length>0}(data)){if(data.asyncapi.startsWith("2."))return{type:SPEC_TYPE_ASYNCAPI_2,version:data.asyncapi};throw new Error(`AsyncApi version ${data.asyncapi} is not supported.`)}return function isGraphApi(data){return qubershipApihubJsonCrawl.isObject(data)&&"graphapi"in data&&"string"==typeof data.graphapi&&data.graphapi.length>0}(data)?{type:SPEC_TYPE_GRAPH_API,version:data.graphapi}:{type:SPEC_TYPE_JSON_SCHEMA_07,version:"not-defined"}}const ErrorMessage_mergeError=()=>"Could not merge values, they are probably incompatible",ErrorMessage_mergeWithBrokenRef=()=>"Could not merge values with unresolved ref",ErrorMessage_ruleNotFound=key=>`Merge rule not found for key: ${key}`,ErrorMessage_richRefObjectNotAllowed=ref=>`${JSON_SCHEMA_PROPERTY_REF} can't have siblings in this specification version: ${ref}`,ErrorMessage_refNotFound=ref=>`${JSON_SCHEMA_PROPERTY_REF} can't be resolved: ${ref}`,ErrorMessage_refNotValidFormat=ref=>`${JSON_SCHEMA_PROPERTY_REF} can't be parsed: ${ref}`,createCycledJsoHandlerHook=()=>{const jsoCopyStates=new Map;return({key,value,state})=>{if(!qubershipApihubJsonCrawl.isObject(value))return{value};const safeKey=key??qubershipApihubJsonCrawl.JSON_ROOT_KEY;let jsoState=jsoCopyStates.get(value);jsoState||(jsoState={type:"not-yet-copied",lazyAppliers:[]},jsoCopyStates.set(value,jsoState));const node=state.node;switch(jsoState.type){case"completed":return node[safeKey]=jsoState.jsoInResult,{done:!0,value:node[safeKey]};case"in-progress":return node[safeKey]=jsoState.partialJsoInResult,{done:!0,value:jsoState.partialJsoInResult};case"not-yet-copied":{const lazyAppliers=jsoState.lazyAppliers;return{value,exitHook:()=>{const valueAfterAllHooks=node[safeKey],newState={type:"completed",jsoInResult:valueAfterAllHooks};jsoCopyStates.set(value,newState),jsoCopyStates.set(valueAfterAllHooks,newState)},afterHooksHook:()=>{const valueAfterAllHooks=node[safeKey];for(;lazyAppliers.length;)lazyAppliers.pop()(valueAfterAllHooks);const newState={type:"in-progress",partialJsoInResult:valueAfterAllHooks};jsoCopyStates.set(value,newState),jsoCopyStates.set(valueAfterAllHooks,newState)}}}}}},sameValueOrigins=(result,array)=>uniqueItems(array.reduce(((r,v)=>(v.value===result&&r.push(...v.origins),r)),[])),allOrigins=array=>uniqueItems(array.reduce(((r,v)=>(r.push(...v.origins),r)),[])),mergeResultWithSameValueOrigins=(array,f)=>{const result=f(array.map((value=>value.value)));return void 0!==result?{value:result,origins:sameValueOrigins(result,array)}:void 0},mergeResultWithAllOrigins=(array,f)=>{const result=f(array.map((value=>value.value)));return void 0!==result?{value:result,origins:allOrigins(array)}:void 0},last=args=>args[args.length-1],and=args=>mergeResultWithSameValueOrigins(args,(args2=>args2.reduce(((r,v)=>r&&v),!0))),or=args=>mergeResultWithSameValueOrigins(args,(args2=>args2.reduce(((r,v)=>r||v),!1))),minValue=args=>mergeResultWithSameValueOrigins(args,(args2=>Math.min(...args2))),maxValue=args=>mergeResultWithSameValueOrigins(args,(args2=>Math.max(...args2))),mergePattern=args=>mergeResultWithAllOrigins(args,(args2=>args2.reduce(((r,v)=>`${r}(?=${v})`),""))),equal=args=>mergeResultWithAllOrigins(args,(([one,...others])=>others.find((v=>!fastEquals.deepEqual(v,one)))?void 0:one)),mergeObjects=args=>mergeResultWithAllOrigins(args,(([one,...others])=>others.reduce(((r,v)=>mergeValues(r,v)),qubershipApihubJsonCrawl.isArray(one)?[...one]:{...one}))),mergeCombination=(args,ctx)=>{const result=findCombinations(args.map((value=>value.value)),ctx.options.originsFlag).map((v=>{const allOf={[JSON_SCHEMA_PROPERTY_ALL_OF]:v},origins=uniqueItems([...Object.values(resolveOriginsMetaRecord(v,ctx.options.originsFlag)??{})].flatMap((value=>value)));return setOrigins(allOf,"allOf",ctx.options.originsFlag,origins),{allOf,origins}}));setOriginsForArray(result,ctx.options.originsFlag,result.map((value=>value.origins)));const allOfs=result.map((value=>value.allOf));return copyOriginsForArray(result,allOfs,ctx.options.originsFlag),{value:allOfs,origins:allOrigins(args)}},mergeNot=(args,ctx)=>{const result={[JSON_SCHEMA_PROPERTY_ANY_OF]:args.map((valueWithOrigins=>valueWithOrigins.value))};return setOriginsForArray(result.anyOf,ctx.options.originsFlag,args.map((valueWithOrigins=>valueWithOrigins.origins))),setOrigins(result,"anyOf",ctx.options.originsFlag,allOrigins(args)),{value:result,origins:allOrigins(args)}},mergeMultipleOf=args=>mergeResultWithAllOrigins(args,(args2=>calculateLCM(args2))),concatString=args=>mergeResultWithAllOrigins(args,(args2=>args2.join("; "))),concatArrays=args=>mergeResultWithAllOrigins(args,(args2=>args2.reduce(((r,v)=>[...r,...v]),[]))),mergeEnum=(args,ctx)=>{const result=intersectArrays(args,ctx,fastEquals.deepEqual);return result.value.length||ctx.mergeError(args,"there are no common values in enum"),result},mergeTypes=(args,ctx)=>{const rawArrayTypes=args.map((type=>{if(Array.isArray(type.value))return type;const syntheticArray=[type.value];return setOriginsForArray(syntheticArray,ctx.options.originsFlag,[type.origins]),{value:syntheticArray,origins:type.origins}})),nothingTypes=rawArrayTypes.filter((typesWithOrigins=>0===typesWithOrigins.value.length||typesWithOrigins.value.includes("nothing")));if(nothingTypes.length)return{value:"nothing",origins:allOrigins(nothingTypes)};const allTypes=new Set(rawArrayTypes.flatMap((types=>types.value)));if(1===allTypes.size)return{value:[...allTypes][0],origins:allOrigins(rawArrayTypes)};const arrayTypes=rawArrayTypes.map((typesWithOrigins=>{const{items:types,itemsOrigins}=typesWithOrigins.value.map(((type,index)=>"any"===type?{items:JSON_SCHEMA_NODE_TYPES,itemsOrigins:Array(JSON_SCHEMA_NODE_TYPES.length).fill(resolveOrigins(typesWithOrigins.value,index,ctx.options.originsFlag))}:{items:[type],itemsOrigins:[resolveOrigins(typesWithOrigins.value,index,ctx.options.originsFlag)]})).reduce(((result,other)=>({items:[...result.items,...other.items],itemsOrigins:[...result.itemsOrigins,...other.itemsOrigins]})));return setOriginsForArray(types,ctx.options.originsFlag,itemsOrigins),{value:types,origins:typesWithOrigins.origins}})),mergedTypes=intersectArrays(arrayTypes,ctx,((a,b)=>a===b));return 0===mergedTypes.value.length?{value:"nothing",origins:mergedTypes.origins}:1===mergedTypes.value.length?{value:mergedTypes.value[0],origins:resolveOrigins(mergedTypes.value,0,ctx.options.originsFlag)}:mergedTypes},findCombinations=(vectors,originsFlag)=>{if(0===vectors.length)return[[]];const firstItems=vectors[0],remainingVectors=vectors.slice(1),combinationVectors=findCombinations(remainingVectors,originsFlag),result=[],firstItemsOriginsRecord=resolveOriginsMetaRecord(firstItems,originsFlag)??{};for(let firstItemsIndex=0;firstItemsIndex<firstItems.length;firstItemsIndex++){const firstItem=firstItems[firstItemsIndex],firstItemOrigins=firstItemsOriginsRecord[firstItemsIndex]??{};for(const combinationItems of combinationVectors){const items=[firstItem,...combinationItems];setOriginsForArray(items,originsFlag,[firstItemOrigins,...combinationItems.map(((_,index)=>resolveOrigins(combinationItems,index,originsFlag)))]),result.push(items)}}return result},mergeValues=(value,patch)=>{if(Array.isArray(value)&&Array.isArray(patch))return[...value,...patch];if(qubershipApihubJsonCrawl.isObject(value)&&qubershipApihubJsonCrawl.isObject(patch)){const result={...value};for(const key of Object.keys(patch))result[key]=mergeValues(result[key],patch[key]);return result}return patch},mergeStringSets=(args,ctx)=>{const itemOriginsMap=new Map,arrayOrigins=[];for(const array of args)array.value.forEach(((str,index)=>{const stringOrigins=resolveOriginsOrNothing(array.value,index,ctx);itemOriginsMap.set(str,[...itemOriginsMap.get(str)??[],...stringOrigins])})),arrayOrigins.push(...array.origins);const items=Array.from(itemOriginsMap.keys());return setOriginsForArray(items,ctx.options.originsFlag,Array.from(itemOriginsMap.values())),{value:items,origins:arrayOrigins}},intersectArrays=(args,ctx,equals)=>{const[one,...others]=args;return others.reduce(((result,nextArray)=>{const itemOriginsMap=new Map;result.value.forEach(((item,index)=>{const origins=resolveOriginsOrNothing(result.value,index,ctx),currentItemWithOrigins=((map,item)=>map.get(item)?[item,map.get(item)]:Array.from(map.entries()).find((([otherItem])=>equals(item,otherItem))))(itemOriginsMap,item);if(currentItemWithOrigins){const[currentItem,currentOrigins]=currentItemWithOrigins;itemOriginsMap.set(currentItem,[...currentOrigins??[],...origins])}else{const sameItemIndex=nextArray.value.findIndex((otherItem=>equals(item,otherItem))),foundItemOrigins=sameItemIndex>=0?resolveOriginsOrNothing(nextArray.value,sameItemIndex,ctx):void 0;foundItemOrigins&&itemOriginsMap.set(item,[...origins,...foundItemOrigins])}}));const filteredItems=Array.from(itemOriginsMap.keys()),itemOrigins=filteredItems.map((item=>itemOriginsMap.get(item)));return setOriginsForArray(filteredItems,ctx.options.originsFlag,itemOrigins),{value:filteredItems,origins:[...result.origins,...nextArray.origins]}}),one)},resolveOriginsOrNothing=(array,index,ctx)=>ctx.options.originsFlag?resolveOrigins(array,index,ctx.options.originsFlag):[],groupValuesByProperty=(records,options)=>{const result={};for(const schemaWithOrigins of records){const schema=schemaWithOrigins.value;if(qubershipApihubJsonCrawl.isObject(schema))for(const key of Reflect.ownKeys(schema).filter((key2=>key2!==options.originsFlag))){const itemWithOrigins={value:schema[key],origins:resolveOrigins(schema,key,options.originsFlag)??[]};qubershipApihubJsonCrawl.isArray(result[key])?result[key].push(itemWithOrigins):result[key]=[itemWithOrigins]}}return result},dependenciesMergeResolver=(args,ctx)=>{var _a;const result={},props=groupValuesByProperty(args,ctx.options);for(const[prop,itemsWithOrigins]of Object.entries(props)){const items=itemsWithOrigins.map((itemWithOrigin=>itemWithOrigin.value));if(items.reduce(((r,v)=>r&&Array.isArray(v)),!0))result[prop]=null==(_a=mergeStringSets(itemsWithOrigins,ctx))?void 0:_a.value;else{const _items=items.map((v=>Array.isArray(v)?{required:v}:v));result[prop]=_items.length>1?{[JSON_SCHEMA_PROPERTY_ALL_OF]:_items}:_items[0]}}return{value:result,origins:[]}},jsonSchemaMergeResolver=(args,ctx)=>{const result={},groupedValues=groupValuesByProperty(args,ctx.options);"properties"in groupedValues&&(groupedValues.properties=preparePropertiesForMerge(args,ctx)),"patternProperties"in groupedValues&&(groupedValues.patternProperties=preparePatternPropertiesForMerge(args,ctx)),"title"in groupedValues&&ctx.options.syntheticTitleFlag&&(groupedValues.title=((itemWithOrigins,syntheticPropertyKey,options)=>{const richTitles=[];for(const schemaWithOrigins of itemWithOrigins){const schema=schemaWithOrigins.value;"title"in schema&&"string"==typeof schema.title&&richTitles.push({value:{title:schema.title,synthetic:syntheticPropertyKey in schema&&!!schema[syntheticPropertyKey]},origins:resolveOrigins(schema,"title",options.originsFlag)??[]})}return richTitles})(args,ctx.options.syntheticTitleFlag,ctx.options),delete groupedValues[ctx.options.syntheticTitleFlag]);for(const[key,valuesWithOrigins]of Object.entries(groupedValues)){if(!valuesWithOrigins.length)continue;const rules=ctx.mergeRules,rule=qubershipApihubJsonCrawl.getNodeRules(rules,key,[],void 0),mergeFunc=null==rule?void 0:rule.merge;if(1===valuesWithOrigins.length){const valueWithOrigins=valuesWithOrigins[0];result[key]=valueWithOrigins.value,setOrigins(result,key,ctx.options.originsFlag,valueWithOrigins.origins)}else{if(!mergeFunc)throw new Error(ErrorMessage_ruleNotFound(key));const merged=mergeFunc(valuesWithOrigins,{...ctx,allMergeItemsWithOrigins:args});void 0===merged?ctx.mergeError(valuesWithOrigins,"undefined after merge"):(result[key]=merged.value,setOrigins(result,key,ctx.options.originsFlag,merged.origins))}}if("title"in result&&ctx.options.syntheticTitleFlag){const rich=result.title;result.title=rich.title,rich.synthetic&&(result[ctx.options.syntheticTitleFlag]=!0)}if(ctx.options.inlineRefsFlag&&ctx.options.inlineRefsFlag in groupedValues){const uniqueRefs=groupedValues[ctx.options.inlineRefsFlag].flatMap((m=>m.value)).reduce(((r,i)=>(r.includes(i)||r.push(i),r)),[]);result[ctx.options.inlineRefsFlag]=uniqueRefs}const origins=ctx.options.originsFlag?allOrigins(args):[];return Object.keys(result).length?{value:result,origins}:void 0},unifyBooleanSchemas=(items,options)=>items.flatMap((valueWithOrigins=>{const{value:objectOrBoolean}=valueWithOrigins;return"boolean"==typeof objectOrBoolean?[{value:objectOrBoolean?options.syntheticMetaDefinitions.emptyJsonSchema(valueWithOrigins.origins):options.syntheticMetaDefinitions.invertedEmptyJsonSchema(valueWithOrigins.origins)??[],origins:valueWithOrigins.origins}]:qubershipApihubJsonCrawl.isObject(objectOrBoolean)?[valueWithOrigins]:[]})),flattenAllOfItems=(items,options,expandedAllOf=new Set)=>{const result=[];for(const valueWithOrigins of items){const value=valueWithOrigins.value;if(qubershipApihubJsonCrawl.isObject(value))if(value.allOf&&Array.isArray(value.allOf)){const[allOf,sibling]=options.spreadAllOfCache.spreadOrReuse(value);let safeAllOf=allOf;expandedAllOf.has(allOf)?safeAllOf=[]:expandedAllOf.add(allOf);const safeAllOfWithOrigins=safeAllOf.map(((subItem,index)=>({value:subItem,origins:resolveOrigins(safeAllOf,index,options.originsFlag)??[]}))),allOfItems=isSiblingKeysAreImportant(sibling,options)?[...safeAllOfWithOrigins,{value:sibling,origins:valueWithOrigins.origins}]:safeAllOfWithOrigins;result.push(...flattenAllOfItems(allOfItems,options,expandedAllOf))}else qubershipApihubJsonCrawl.isArray(value)||result.push(valueWithOrigins);else result.push(valueWithOrigins)}return result},isSiblingKeysAreImportant=(sibling,options)=>Reflect.ownKeys(sibling).some((key=>"symbol"!=typeof key||key===options.inlineRefsFlag)),preparePropertiesForMerge=(itemWithOrigins,ctx)=>{var _a;const properties=[];for(const thisItemWithOrigins of itemWithOrigins){const thisItem=thisItemWithOrigins.value;if(!("properties"in thisItem))continue;const schemaProperties=thisItem.properties;if(!qubershipApihubJsonCrawl.isObject(schemaProperties)){null==(_a=ctx.mergeError)||_a.call(ctx,itemWithOrigins,"properties should be an object");continue}const ownProperties=new Set(Object.keys(schemaProperties)),additionalPropertiesPerProperty=new MapArray,patterPropertyPerProperty=new MapArray;for(const prop of ownProperties.values())for(const anotherItemWithContext of itemWithOrigins){const anotherItem=anotherItemWithContext.value;if(!(anotherItem==thisItem||qubershipApihubJsonCrawl.isObject(anotherItem.properties)&&prop in anotherItem.properties)){if("patternProperties"in anotherItem&&qubershipApihubJsonCrawl.isObject(anotherItem.patternProperties)){let anyMath=!1;for(const pattern of Object.keys(anotherItem.patternProperties)){const patternSchema=anotherItem.patternProperties[pattern];new RegExp(pattern).test(prop)&&isPossibleRawJsonSchema(patternSchema)&&(patterPropertyPerProperty.add(prop,{value:patternSchema,origins:resolveOrigins(anotherItem.patternProperties,pattern,ctx.options.originsFlag)??[]}),anyMath=!0)}if(anyMath)continue;patterPropertyPerProperty.add(prop,{value:!1,origins:resolveOrigins(anotherItem,"patternProperties",ctx.options.originsFlag)??[]})}"additionalProperties"in anotherItem&&isPossibleRawJsonSchema(anotherItem.additionalProperties)&&additionalPropertiesPerProperty.add(prop,{value:anotherItem.additionalProperties,origins:resolveOrigins(anotherItem,"additionalProperties",ctx.options.originsFlag)??[]})}}if(!ownProperties.size)continue;const props={};for(const prop of ownProperties.values()){const schemaProperty=schemaProperties[prop],additionalPropertiesWithOrigins=additionalPropertiesPerProperty.get(prop)??[],patternPropertiesWithOrigins=patterPropertyPerProperty.get(prop)??[],propOrigins=resolveOrigins(schemaProperties,prop,ctx.options.originsFlag),overallConstraints=[...additionalPropertiesWithOrigins,...patternPropertiesWithOrigins];if(0!==overallConstraints.length){const allOf={[JSON_SCHEMA_PROPERTY_ALL_OF]:[schemaProperty,...overallConstraints.map((valueWithOrigin=>valueWithOrigin.value))]},allOfOrigins=allOrigins([{value:schemaProperty,origins:propOrigins??[]},...overallConstraints]);setOrigins(allOf,"allOf",ctx.options.originsFlag,allOfOrigins),setOriginsForArray(allOf.allOf,ctx.options.originsFlag,[propOrigins,...overallConstraints.map((valueWithOrigin=>valueWithOrigin.origins))]),props[prop]=allOf}else props[prop]=schemaProperty,copyOrigins(schemaProperties,props,prop,prop,ctx.options.originsFlag);setOrigins(props,prop,ctx.options.originsFlag,propOrigins)}properties.push({value:props,origins:resolveOrigins(thisItem,"properties",ctx.options.originsFlag)??[]})}return properties},preparePatternPropertiesForMerge=(itemWithOrigins,ctx)=>{const patternProperties=[];for(const thisItemWithOrigins of itemWithOrigins){const thisItem=thisItemWithOrigins.value;if(!("patternProperties"in thisItem))continue;const thisPatterProperties=thisItem.patternProperties;if(!qubershipApihubJsonCrawl.isObject(thisPatterProperties))continue;const props={};for(const pattern of Object.keys(thisPatterProperties))props[pattern]=thisPatterProperties[pattern],copyOrigins(thisPatterProperties,props,pattern,pattern,ctx.options.originsFlag);patternProperties.push({value:props,origins:resolveOrigins(thisItem,"patternProperties",ctx.options.originsFlag)??[]})}return patternProperties},propertiesMergeResolver=(args,ctx)=>{const result={},props=groupValuesByProperty(args,ctx.options);for(const[prop,itemsWithOrigins]of Object.entries(props))if(itemsWithOrigins.length>1){const obj={[JSON_SCHEMA_PROPERTY_ALL_OF]:itemsWithOrigins.map((item=>item.value))},propOrigins=allOrigins(itemsWithOrigins);setOrigins(result,prop,ctx.options.originsFlag,propOrigins),setOrigins(obj,"allOf",ctx.options.originsFlag,propOrigins),setOriginsForArray(obj.allOf,ctx.options.originsFlag,itemsWithOrigins.map((item=>item.origins))),result[prop]=obj}else{const singleton=itemsWithOrigins[0];result[prop]=singleton.value,setOrigins(result,prop,ctx.options.originsFlag,singleton.origins)}return{value:result,origins:allOrigins(args)}},additionalPropertiesMergeResolver=(args,ctx)=>args.every((valueWithOrigins=>"boolean"==typeof valueWithOrigins.value))?and(args):jsonSchemaMergeResolver(unifyBooleanSchemas(args,ctx.options),ctx),itemsMergeResolver=(args,ctx)=>{if(!args.some((v=>Array.isArray(v.value))))return jsonSchemaMergeResolver(unifyBooleanSchemas(args,ctx.options),ctx);const mergeItems=[];let itemsLimit=1/0,maxItemsLength=0;const additionalItemsSchema=new MapArray;for(const objWithOrigins of ctx.allMergeItemsWithOrigins){const obj=objWithOrigins.value;"additionalItems"in obj&&obj.additionalItems&&"items"in obj&&Array.isArray(obj.items)&&additionalItemsSchema.add(obj.items.length,obj.additionalItems),"items"in obj&&(mergeItems.push(obj.items),Array.isArray(obj.items)&&(maxItemsLength=Math.max(maxItemsLength,obj.items.length),"additionalItems"in obj&&!1===obj.additionalItems&&(itemsLimit=Math.min(itemsLimit,obj.items.length))))}const len=Math.min(maxItemsLength,itemsLimit),items=[...Array(len)].map((()=>({[JSON_SCHEMA_PROPERTY_ALL_OF]:[]})));for(const item of mergeItems)if(Array.isArray(item))for(let j=0;j<len;j++){const allOf=[];for(let k=0;k<=j;k++)additionalItemsSchema.has(k)&&allOf.push(...additionalItemsSchema.get(k));j<item.length?items[j].allOf.push(allOf.length?{...item[j],allOf}:item[j]):items[j].allOf.push(!allOf.length||{allOf})}else items.forEach((({allOf})=>allOf.push(item)));return{value:items,origins:[]}},additionalItemsMergeResolver=(_,ctx)=>{let additionalItems=[];const itemsSchema=[];for(const objWithOrigins of ctx.allMergeItemsWithOrigins){const obj=objWithOrigins.value;"items"in obj&&!qubershipApihubJsonCrawl.isArray(obj.items)&&isPossibleRawJsonSchema(obj.items)&&itemsSchema.push({value:obj.items,origins:[]}),"additionalItems"in obj&&"items"in obj&&Array.isArray(obj.items)&&isPossibleRawJsonSchema(obj.additionalItems)&&additionalItems.push({value:obj.additionalItems,origins:[]})}return itemsSchema.length&&(additionalItems=additionalItems.map((itemWithContext=>({value:{[JSON_SCHEMA_PROPERTY_ALL_OF]:[itemWithContext.value,...itemsSchema.map((valueWithContext=>valueWithContext.value))]},origins:[]})))),additionalItems.every((valueWithOrigins=>"boolean"==typeof valueWithOrigins.value))?and(additionalItems):jsonSchemaMergeResolver(unifyBooleanSchemas(additionalItems,ctx.options),ctx)},COMBINER_KEYS=["oneOf","anyOf"],createLiftCombinersHook=options=>({key,value,rules,state})=>{if(state.ignoreTreeUnderSymbols)return{value};const safeKey=key??qubershipApihubJsonCrawl.JSON_ROOT_KEY;if("symbol"==typeof safeKey&&options.ignoreSymbols.has(safeKey))return{value,state:{...state,ignoreTreeUnderSymbols:!0}};if(!(null==rules?void 0:rules.canLiftCombiners))return{value};if(!qubershipApihubJsonCrawl.isObject(value))return{value};const lifted=function liftCombiners(value,valueOrigins,options){const ignoredKeys=new Set;(null==options?void 0:options.inlineRefsFlag)&&ignoredKeys.add(options.inlineRefsFlag);const{evaluationCacheService:cacheService}=options,allValueKeys=Reflect.ownKeys(value).filter((key=>!ignoredKeys.has(key))).filter((key=>key!==options.originsFlag)),foundCombinerKeys=findCombinerKeys(allValueKeys),isEmptySibling=!function hasSiblingKeys(keys){return keys.some(isSiblingKey)}(allValueKeys);if(!(foundCombinerKeys.length>1||!isEmptySibling&&foundCombinerKeys.length>0))return value;const[firstCombinerKey,secondCombinerKey]=foundCombinerKeys,[firstCombiner,secondCombiner]=[value[firstCombinerKey],value[secondCombinerKey]],firstCombinerItems=Array.isArray(firstCombiner)?firstCombiner:[],secondCombinerItems=Array.isArray(secondCombiner)?secondCombiner:[];return cacheService.cacheEvaluationResultByFootprint([...allValueKeys,...firstCombinerItems,"|",...secondCombinerItems],(()=>{const newValue={...value},copiedFirstCombinerItems=[...firstCombinerItems],firstCombinerItemsOriginsRecord=resolveOriginsMetaRecord(firstCombinerItems,options.originsFlag)??{};if(0===copiedFirstCombinerItems.length)return newValue;const sibling={...newValue};delete sibling[firstCombinerKey],cleanOrigins(sibling,firstCombinerKey,options.originsFlag);for(const ignoredKey of ignoredKeys)delete sibling[ignoredKey],cleanOrigins(sibling,ignoredKey,options.originsFlag);for(const key of allValueKeys)delete newValue[key],cleanOrigins(newValue,key,options.originsFlag);if(!isEmptySibling){firstCombinerItems.splice(0,firstCombinerItems.length),cleanAllOrigins(firstCombinerItems,options.originsFlag);for(let i=0;i<copiedFirstCombinerItems.length;i++){const firstCombinerItem=copiedFirstCombinerItems[i],item={[JSON_SCHEMA_PROPERTY_ALL_OF]:[sibling,firstCombinerItem]},firstCombinerItemsOrigins=firstCombinerItemsOriginsRecord[i]??[],combinationOrigins=uniqueItems([...valueOrigins??[],...firstCombinerItemsOrigins]);setOrigins(item,"allOf",options.originsFlag,combinationOrigins),setOrigins(item.allOf,0,options.originsFlag,valueOrigins),setOrigins(item.allOf,1,options.originsFlag,firstCombinerItemsOrigins),setOrigins(firstCombinerItems,firstCombinerItems.length,options.originsFlag,combinationOrigins),firstCombinerItems.push(item)}}if(0===secondCombinerItems.length)return newValue[firstCombinerKey]=firstCombinerItems,copyOrigins(value,newValue,firstCombinerKey,firstCombinerKey,options.originsFlag),newValue;const copiedSecondCombinerItems=[...secondCombinerItems],secondCombinerItemsOriginsRecord=resolveOriginsMetaRecord(secondCombinerItems,options.originsFlag)??{};secondCombinerItems.splice(0,secondCombinerItems.length),cleanAllOrigins(secondCombinerItems,options.originsFlag);for(let secondCombinerIndex=0;secondCombinerIndex<copiedSecondCombinerItems.length;secondCombinerIndex++){const secondCombinerItem=copiedSecondCombinerItems[secondCombinerIndex],secondCombinerItemOrigins=secondCombinerItemsOriginsRecord[secondCombinerIndex]??[],mergedFirstAndSecondCombinerItems=[];for(let firstCombinerIndex=0;firstCombinerIndex<firstCombinerItems.length;firstCombinerIndex++){const firstCombinerItem=firstCombinerItems[firstCombinerIndex],firstCombinerItemsOrigins=firstCombinerItemsOriginsRecord[firstCombinerIndex]??[],item={[JSON_SCHEMA_PROPERTY_ALL_OF]:[firstCombinerItem,secondCombinerItem]},combinationOrigins=uniqueItems([...firstCombinerItemsOrigins,...secondCombinerItemOrigins]);setOrigins(item,"allOf",options.originsFlag,combinationOrigins),setOrigins(item.allOf,0,options.originsFlag,firstCombinerItemsOrigins),setOrigins(item.allOf,1,options.originsFlag,secondCombinerItemOrigins),setOrigins(mergedFirstAndSecondCombinerItems,mergedFirstAndSecondCombinerItems.length,options.originsFlag,combinationOrigins),mergedFirstAndSecondCombinerItems.push(item)}const newSecondCombinerItem={[firstCombinerKey]:mergedFirstAndSecondCombinerItems};copyOrigins(value,newSecondCombinerItem,firstCombinerKey,firstCombinerKey,options.originsFlag),setOrigins(secondCombinerItems,secondCombinerItems.length,options.originsFlag,secondCombinerItemOrigins),secondCombinerItems.push(newSecondCombinerItem)}return newValue[secondCombinerKey]=secondCombinerItems,copyOrigins(value,newValue,secondCombinerKey,secondCombinerKey,options.originsFlag),delete sibling[secondCombinerKey],cleanOrigins(sibling,secondCombinerKey,options.originsFlag),newValue}))}(value,state.selfOriginResolver(key),options);return{value:lifted}};function mergeProhibitLiftCombiners(jso,options){if(!options.liftCombiners)return jso;const ignoredKeys=new Set;(null==options?void 0:options.inlineRefsFlag)&&(null==options?void 0:options.inlineRefsFlag)in jso&&ignoredKeys.add(options.inlineRefsFlag);const ownKeys=Reflect.ownKeys(jso),foundCombinerKeys=findCombinerKeys(ownKeys),[combiner]=foundCombinerKeys;if(!combiner)return jso;const arrayCombiner=jso[combiner];if(!qubershipApihubJsonCrawl.isArray(arrayCombiner))return jso;if(0===ownKeys.filter((key=>key!==combiner&&!ignoredKeys.has(key))).length)return jso;const toTopLevel=[...ignoredKeys].reduce(((collector,propertyKey)=>(collector[propertyKey]=jso[propertyKey],copyOrigins(jso,collector,propertyKey,propertyKey,options.originsFlag),collector)),{}),toNestedLevel=[...ignoredKeys,combiner].reduce(((collector,propertyKey)=>(delete collector[propertyKey],cleanOrigins(collector,propertyKey,options.originsFlag),collector)),{...jso}),result={...toTopLevel,[combiner]:arrayCombiner.map((combinerItem=>{if(function hasCommonProperties(one,another){const oneKeys=new Set(Reflect.ownKeys(one));return Reflect.ownKeys(another).some((key=>oneKeys.has(key)))}(combinerItem,toTopLevel))throw new Error("Merge common properties should never happened on last phase");mergeOrigins(toNestedLevel,[combinerItem],options.originsFlag);return mergeProhibitLiftCombiners({...combinerItem,...toNestedLevel},options)}))};return copyOrigins(jso,result,combiner,combiner,options.originsFlag),setOriginsForArray(result[combiner],options.originsFlag,arrayCombiner.map(((_,index)=>resolveOrigins(arrayCombiner,index,options.originsFlag)))),result}function isCombinerKey(key){return COMBINER_KEYS.includes(key)}function isSiblingKey(key){return!isCombinerKey(key)}function findCombinerKeys(keys){return keys.filter(isCombinerKey)}const extractEmptyJsonSchema=(jsoOrBoolean,{origins,options})=>"boolean"==typeof jsoOrBoolean?jsoOrBoolean?options.syntheticMetaDefinitions.emptyJsonSchema(origins):options.syntheticMetaDefinitions.invertedEmptyJsonSchema(origins):qubershipApihubJsonCrawl.isObject(jsoOrBoolean)&&!qubershipApihubJsonCrawl.isArray(jsoOrBoolean)&&0===Object.keys(jsoOrBoolean).length?combineJsonSchemaWithMetaJso(jsoOrBoolean,options.syntheticMetaDefinitions.emptyJsonSchema(options.createOriginsForDefaults(origins)),options):jsoOrBoolean,combineJsonSchemaWithMetaJso=(jsonSchema,metaJsonSchema,opt)=>{if(0===Reflect.ownKeys(jsonSchema).length)return metaJsonSchema;const mergedSchema={...jsonSchema,...metaJsonSchema};return mergeOrigins(mergedSchema,[jsonSchema,metaJsonSchema],opt.originsFlag),mergeProhibitLiftCombiners(mergedSchema,opt)},JSON_SCHEMA_TYPE_TO_DISCRIMINATOR_PROPS={[JSON_SCHEMA_NODE_TYPE_BOOLEAN]:[],[JSON_SCHEMA_NODE_TYPE_STRING]:["format","minLength","maxLength","pattern"],[JSON_SCHEMA_NODE_TYPE_NUMBER]:["format","multipleOf","minimum","exclusiveMinimum","maximum","exclusiveMaximum"],[JSON_SCHEMA_NODE_TYPE_INTEGER]:["format","multipleOf","minimum","exclusiveMinimum","maximum","exclusiveMaximum"],[JSON_SCHEMA_NODE_TYPE_OBJECT]:["required","minProperties","maxProperties","propertyNames","properties","patternProperties","additionalProperties"],[JSON_SCHEMA_NODE_TYPE_ARRAY]:["contains","minItems","maxItems","uniqueItems","items","additionalItems"],[JSON_SCHEMA_NODE_TYPE_NULL]:[]},JSON_SCHEMA_TYPE_TO_RESTRICTED_PROPS=Object.fromEntries([...Object.entries(JSON_SCHEMA_TYPE_TO_DISCRIMINATOR_PROPS).map((([type,properties])=>{const allProperties=Object.keys(JSON_SCHEMA_TYPE_TO_DISCRIMINATOR_PROPS).filter((key=>key!==type)).flatMap((key=>JSON_SCHEMA_TYPE_TO_DISCRIMINATOR_PROPS[key])).reduce(((acc,prop)=>acc.add(prop)),new Set);return properties.forEach((prop=>allProperties.delete(prop))),[type,allProperties]})),["any",new Set],["nothing",new Set(["contentMediaType","const","propertyNames","contains","dependencies","defs","description","format","default","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","maxItems","minItems","uniqueItems","maxProperties","minProperties","items","additionalItems","required","enum","properties","additionalProperties","patternProperties","allOf","oneOf","anyOf","not","nullable","readOnly","writeOnly","examples",JSON_SCHEMA_PROPERTY_DEPRECATED,"definitions",JSON_SCHEMA_PROPERTY_REF])]]);const isPureCombiner=jso=>{const propertyKeys=Object.keys(jso);return 1===propertyKeys.length&&("anyOf"===propertyKeys[0]||"oneOf"===propertyKeys[0]||"not"===propertyKeys[0])},isBroken=jso=>"allOf"in jso||JSON_SCHEMA_PROPERTY_REF in jso;function isReadyToTypeInfer(jso){return!(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))&&(!isPureCombiner(jso)&&!isBroken(jso))}const jsonSchemaTypeInferWithRestriction=allowedTypes=>({forward:(jso,{origins,options})=>{if(!isReadyToTypeInfer(jso))return jso;if("type"in jso)return jso;const typesToOrigins=function inferTypes(jso,allowedTypes,options){return allowedTypes.reduce(((acc,type)=>(JSON_SCHEMA_TYPE_TO_DISCRIMINATOR_PROPS[type].filter((property=>property in jso)).reduce(((acc2,property)=>{let origins=acc2[type];return origins||(origins=[],acc2[type]=origins),origins.push(...(resolveOrigins(jso,property,options.originsFlag)??[]).filter((value=>!origins.includes(value)))),acc2}),acc),acc)),{})}(jso,allowedTypes,options),types=Object.keys(typesToOrigins);if(0===types.length)return combineJsonSchemaWithMetaJso(jso,options.syntheticMetaDefinitions.emptyJsonSchema(options.createOriginsForDefaults(origins)),options);const overallOrigins=uniqueItems(Object.values(typesToOrigins).flatMap((value=>value))),result={...jso,[JSON_SCHEMA_PROPERTY_TYPE]:types};return setOrigins(result,"type",options.originsFlag,overallOrigins),setOriginsForArray(result.type,options.originsFlag,types.map((type=>typesToOrigins[type]))),result},backward:(jso,{path,options})=>{qubershipApihubJsonCrawl.isObject(jso)&&!qubershipApihubJsonCrawl.isArray(jso)&&(options.allowNotValidSyntheticChanges||options.syntheticMetaDefinitions.omitIfAssignableToEmptyJsonSchema(jso,options.skip?(v,p)=>options.skip(v,[...path,...p]):void 0)||options.syntheticMetaDefinitions.omitIfAssignableToInvertedEmptyJsonSchema(jso,options.skip?(v,p)=>options.skip(v,[...path,...p]):void 0)&&Object.assign(jso,{[JSON_SCHEMA_PROPERTY_TYPE]:void 0}))}}),jsonSchemaTypeInfer=jsonSchemaTypeInferWithRestriction(JSON_SCHEMA_NODE_TYPES),splitJsonSchemaTypeArray=(jso,{origins,options})=>{if(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))return jso;if(!("type"in jso))return jso;const types=jso.type;if(!qubershipApihubJsonCrawl.isArray(types))return jso;if(0===types.length)return combineJsonSchemaWithMetaJso(jso,options.syntheticMetaDefinitions.invertedEmptyJsonSchema(origins),options);const originsFlag=options.originsFlag,uniqueTypes=removeDuplicatesWithMergeOrigins(types,originsFlag,fastEquals.deepEqual);if(1===uniqueTypes.length){const result2={...jso,[JSON_SCHEMA_PROPERTY_TYPE]:uniqueTypes[0]};return setOrigins(result2,"type",originsFlag,resolveOrigins(uniqueTypes,0,originsFlag)),result2}const typesOrigins=resolveOriginsMetaRecord(uniqueTypes,originsFlag)??{},{type,...result}=jso;return result.anyOf=uniqueTypes.map(((type2,index)=>{const schemaType={[JSON_SCHEMA_PROPERTY_TYPE]:type2};return copyOrigins(uniqueTypes,schemaType,index,"type",originsFlag),schemaType})),copyOrigins(result,result,"type","anyOf",originsFlag),setOriginsForArray(result.anyOf,originsFlag,uniqueTypes.map(((_,index)=>typesOrigins[index]))),cleanOrigins(result,"type",originsFlag),mergeProhibitLiftCombiners(result,options)},cleanJsonSchemaTypeSpecificProperties=(jso,{options})=>{if(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))return jso;if(!("type"in jso))return jso;const types=jso.type;if(qubershipApihubJsonCrawl.isArray(types))return jso;const notAllowedProperties=JSON_SCHEMA_TYPE_TO_RESTRICTED_PROPS[types],toCleanupProperties=Object.keys(jso).filter((key=>notAllowedProperties.has(key)));if(0===toCleanupProperties.length)return jso;const shallowCopy={...jso},defaultMetaCopy={...(options.defaultsFlag?jso[options.defaultsFlag]:{})??{}},originsMetaCopy={...resolveOriginsMetaRecord(shallowCopy,options.originsFlag)??{}};return toCleanupProperties.forEach((key=>{delete shallowCopy[key],delete defaultMetaCopy[key],delete originsMetaCopy[key]})),options.defaultsFlag&&(0===Object.keys(defaultMetaCopy).length?delete shallowCopy[options.defaultsFlag]:shallowCopy[options.defaultsFlag]=defaultMetaCopy),options.originsFlag&&(0===Object.keys(originsMetaCopy).length?delete shallowCopy[options.originsFlag]:shallowCopy[options.originsFlag]=originsMetaCopy),shallowCopy};function checkType(...expectedTypes){const f=value=>{let actualType=typeof value;return"object"===actualType&&(null===value&&(actualType="undefined"),Array.isArray(value)&&(actualType="array")),expectedTypes.some((type=>actualType===type))};return Object.defineProperty(f,"name",{value:`checkType: ${expectedTypes.join()}`,writable:!1}),f}function checkContains(...allowedValues){const f=value=>allowedValues.some((allowed=>allowed===value));return Object.defineProperty(f,"name",{value:`checkContains: ${allowedValues.join()}`,writable:!1}),f}const TYPE_JSON_ANY=["object","array","boolean","number","string"],unifyJsonSchemaRequired=(jso,ctx)=>{if(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))return jso;if(isPureCombiner(jso))return jso;if(isBroken(jso))return jso;if(!("properties"in jso)||!("required"in jso))return jso;const required=jso.required,existing=new Set(Object.keys(jso.properties)),itemOriginsMap=new Map,newRequired=required.reduce(((aggr,current,currentIndex)=>{if(!existing.has(current))return aggr;const currentOrigins=resolveOrigins(required,currentIndex,ctx.options.originsFlag)??[],previousOrigins=itemOriginsMap.get(current);return previousOrigins||aggr.push(current),itemOriginsMap.set(current,[...previousOrigins??[],...currentOrigins]),aggr}),[]);return setOriginsForArray(newRequired,ctx.options.originsFlag,newRequired.map((item=>itemOriginsMap.get(item)))),required.length===newRequired.length?jso:{...jso,[JSON_SCHEMA_PROPERTY_REQUIRED]:newRequired}},unifyJsonSchemaEnums=(jso,ctx)=>qubershipApihubJsonCrawl.isArray(jso)?removeDuplicatesWithMergeOrigins(jso,ctx.options.originsFlag,fastEquals.deepEqual):jso,cleanUpSyntheticJsonSchemaTypes={forward:(value,{options})=>{if(options.allowNotValidSyntheticChanges)return value;if(!qubershipApihubJsonCrawl.isObject(value))return value;const jsoCandidate={...value},empty=options.syntheticMetaDefinitions.omitIfAssignableToEmptyJsonSchema(jsoCandidate);if(empty)return combineJsonSchemaWithMetaJso(jsoCandidate,options.nativeMetaDefinitions.emptyJsonSchema(empty),options);const invertedEmpty=options.syntheticMetaDefinitions.omitIfAssignableToInvertedEmptyJsonSchema(jsoCandidate);return invertedEmpty?combineJsonSchemaWithMetaJso(jsoCandidate,options.nativeMetaDefinitions.invertedEmptyJsonSchema(invertedEmpty),options):value},backward:(value,{path,options})=>{if(!qubershipApihubJsonCrawl.isObject(value))return;if(options.allowNotValidSyntheticChanges)return;const empty=options.nativeMetaDefinitions.omitIfAssignableToEmptyJsonSchema(value,options.skip?(v,p)=>options.skip(v,[...path,...p]):void 0);if(empty){const emptySchema=options.syntheticMetaDefinitions.emptyJsonSchema(empty);mergeOrigins(value,[emptySchema],options.originsFlag);const originsMetaRecord=resolveOriginsMetaRecord(value,options.originsFlag);return Object.assign(value,emptySchema),void(options.originsFlag&&setJsoProperty(value,options.originsFlag,originsMetaRecord))}const invertedEmpty=options.nativeMetaDefinitions.omitIfAssignableToInvertedEmptyJsonSchema(value,options.skip?(v,p)=>options.skip(v,[...path,...p]):void 0);if(invertedEmpty){const invertedEmptyJsonSchema=options.syntheticMetaDefinitions.invertedEmptyJsonSchema(invertedEmpty);mergeOrigins(value,[invertedEmptyJsonSchema],options.originsFlag);const originsMetaRecord=resolveOriginsMetaRecord(value,options.originsFlag);Object.assign(value,invertedEmptyJsonSchema),options.originsFlag&&setJsoProperty(value,options.originsFlag,originsMetaRecord)}}},forwardOnlyCleanUpSyntheticJsonSchemaTypes=(value,{options})=>{if(options.allowNotValidSyntheticChanges)return value;if(!qubershipApihubJsonCrawl.isObject(value))return value;const jsoCandidate={...value};if(options.syntheticMetaDefinitions.omitIfAssignableToEmptyJsonSchema(jsoCandidate))return jsoCandidate;const invertedEmpty=options.syntheticMetaDefinitions.omitIfAssignableToInvertedEmptyJsonSchema(jsoCandidate);return invertedEmpty?combineJsonSchemaWithMetaJso(jsoCandidate,options.nativeMetaDefinitions.invertedEmptyJsonSchema(invertedEmpty),options):value},PLACE_HOLDER_JSO$1={},valueDefaults=map=>({forward:(jso,{options,origins})=>{if(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))return jso;if(isPureCombiner(jso))return jso;if(isBroken(jso))return jso;let shallowJso=PLACE_HOLDER_JSO$1;const defaultsMeta={...options.defaultsFlag?jso[options.defaultsFlag]??{}:{}},overrideDefaultsKeys=new Set(Object.keys(defaultsMeta));let hasDefaults=!1;const originsForDefaults=options.originsFlag?options.createOriginsForDefaults(origins):void 0;if(Object.entries(map).forEach((([propertyKey,defaultValue])=>{propertyKey in jso?jso[propertyKey]===defaultValue&&(defaultsMeta[propertyKey]=overrideDefaultsKeys.has(propertyKey)?defaultsMeta[propertyKey]:"pure",hasDefaults=!0):(shallowJso===PLACE_HOLDER_JSO$1&&(shallowJso={...jso}),shallowJso[propertyKey]=defaultValue,defaultsMeta[propertyKey]="synthetic",hasDefaults=!0)})),shallowJso===PLACE_HOLDER_JSO$1)return hasDefaults&&options.defaultsFlag?{...jso,[options.defaultsFlag]:defaultsMeta}:jso;if(options.defaultsFlag&&(shallowJso[options.defaultsFlag]=defaultsMeta),options.originsFlag){const defaults=Object.entries(defaultsMeta).filter((([key,value])=>"synthetic"===value)).map((([key])=>key));if(defaults.length>0&&originsForDefaults){const newOrigins=defaults.reduce(((collector,key)=>(collector[key]=originsForDefaults,collector)),{...resolveOriginsMetaRecord(shallowJso,options.originsFlag)??{}});setJsoProperty(shallowJso,options.originsFlag,newOrigins)}}return shallowJso},backward:(jso,{path,options})=>{if(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))return;if(isBroken(jso))return;options.defaultsFlag&&delete jso[options.defaultsFlag];const candidates=Object.entries(map).flatMap((([key,def])=>key in jso?[{value:jso[key],key,def}]:[])).filter((({def,value})=>def===value)).filter((({key,value})=>!options.skip||!options.skip(value,[...path,key])));candidates.reverse().forEach((({key:propertyKey})=>{delete jso[propertyKey]})),cleanSeveralOrigins(jso,candidates.map((value=>value.key)),options.originsFlag)}}),PLACE_HOLDER_JSO={},deepEqualsMatcher=one=>another=>fastEquals.deepEqual(one,another),valueReplaces=map=>({forward:(jso,{options})=>{if(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))return jso;if(isPureCombiner(jso))return jso;if(isBroken(jso))return jso;let shallowJso=PLACE_HOLDER_JSO;return Object.entries(map).forEach((([propertyKey,f])=>{var _a;if(propertyKey in jso){const value=jso[propertyKey],replace=null==(_a=f.mapping)?void 0:_a.get(value);replace&&(shallowJso===PLACE_HOLDER_JSO&&(shallowJso={...jso}),shallowJso[propertyKey]=replace.value(resolveOrigins(shallowJso,propertyKey,options.originsFlag),options))}})),shallowJso===PLACE_HOLDER_JSO?jso:shallowJso},backward:(jso,{path,options})=>{if(!qubershipApihubJsonCrawl.isObject(jso)||qubershipApihubJsonCrawl.isArray(jso))return;if(isBroken(jso))return;const candidates=Object.entries(map).flatMap((([key,f])=>key in jso?[{value:jso[key],key,f}]:[])).filter((({key,value})=>!options.skip||!options.skip(value,[...path,key]))),ignorePropertyKeys=new Set(Object.keys(map));options.ignoreSymbols.forEach((s=>ignorePropertyKeys.add(s))),candidates.reverse().forEach((({key:propertyKey,value,f})=>{[...(f.mapping??new Map).entries()].some((([replaceMappingValue,possibleValue])=>!!possibleValue.reverseMatcher(value,ignorePropertyKeys,options)&&(jso[propertyKey]=replaceMappingValue,!0)))}))}}),ANY_VALUE=Symbol("any-value"),deepCircularEqualsWithPropertyFilter=fastEquals.createCustomEqual((defaultOptions=>({...defaultOptions,areObjectsEqual:(a,b,isEqual,meta)=>meta.cache.cacheEvaluationResultByFootprint([a,b],(([aJso,bJso])=>{const propertyFilter=jso=>key=>{const ignoreProperty=meta.ignoreProperties[key];if(!ignoreProperty)return!0;if(ignoreProperty===ANY_VALUE)return!1;const originalValue=jso[key];return!isEqual(originalValue,ignoreProperty,key,key,jso,void 0,meta)},keysA=Reflect.ownKeys(aJso).filter(propertyFilter(aJso));if(Reflect.ownKeys(bJso).filter(propertyFilter(bJso)).length!==keysA.length)return{value:!1};let aKeyIndex=keysA.length;for(;aKeyIndex-- >0;){const key=keysA[aKeyIndex];if(!(key in bJso)||!isEqual(aJso[key],bJso[key],key,key,aJso,bJso,meta))return{value:!1}}return{value:!0}}),{value:void 0},((result2,guard)=>(guard.value=result2.value,guard))).value??!0,areArraysEqual:(a,b,isEqual,meta)=>meta.cache.cacheEvaluationResultByFootprint([a,b],(([aJso,bJso])=>{const propertyFilter=key=>{const ignoreProperty=meta.ignoreProperties[key];return!ignoreProperty||ignoreProperty!==ANY_VALUE},keysA=qubershipApihubJsonCrawl.anyArrayKeys(aJso).filter(propertyFilter);if(qubershipApihubJsonCrawl.anyArrayKeys(bJso).filter(propertyFilter).length!==keysA.length)return{value:!1};let aKeyIndex=keysA.length;for(;aKeyIndex-- >0;){const key=keysA[aKeyIndex];if(!(key in bJso)||!isEqual(aJso[key],bJso[key],key,key,aJso,bJso,meta))return{value:!1}}return{value:!0}}),{value:void 0},((result2,guard)=>(guard.value=result2.value,guard))).value??!0,areMapsEqual:()=>{throw"Not supported"}}))),createEvaluationCacheService=()=>{const instanceMap=new Map,cache=new Map,instanceToFootprint=jso=>{const instanceId=instanceMap.get(jso);if(void 0!==instanceId)return instanceId;const id=(instanceMap.size+1).toString();return instanceMap.set(jso,id),id};return{cacheEvaluationResultByFootprint:function cacheEvaluationResultByFootprint(jso,evaluate,cyclicGuardResult,mergeResultWithGuard){const footprint=(jso=>{const rawItems=qubershipApihubJsonCrawl.isArray(jso)?jso.map((instanceMap2=>instanceToFootprint(instanceMap2))):[instanceToFootprint(jso)],usedItems=new Set(rawItems);return rawItems.reduceRight(((collector,currentValue)=>(usedItems.has(currentValue)&&(collector.push(currentValue),usedItems.delete(currentValue)),collector)),[]).join()})(jso);let instance=cache.get(footprint);return void 0===instance&&(cache.set(footprint,cyclicGuardResult),instance=evaluate(jso),void 0!==cyclicGuardResult&&void 0!==mergeResultWithGuard&&(instance=mergeResultWithGuard(instance,cyclicGuardResult)),cache.set(footprint,instance)),instance}}};function createPropertySpreadWithCacheService(propertyKey){const cache=new Map;return{spreadOrReuse:function spreadOrReuse(jso){const result=cache.get(jso);if(result)return result;const jsoCopy={...jso},firstArg=jso[propertyKey];if(void 0===firstArg)return[void 0,jso];delete jsoCopy[propertyKey];const spread=[firstArg,jsoCopy];return cache.set(jso,spread),spread}}}const PREDICATE_ANY_VALUE=Symbol("?"),PREDICATE_UNCLOSED_END=Symbol("**");const matchPaths=(paths,predicates)=>paths.reduce(((matchResult,path)=>matchResult||function matchPath(path,predicates){const predicateMap=new Map(predicates.map(((value,index)=>[index,value]))),state=path.reduce(((state2,pathItem,currentIndex)=>(state2.predicateMap.forEach(((predicate,key,map)=>{0===predicate.length&&(currentIndex===path.length?map.set(key,predicate):map.delete(key));const predicateCopy=[...predicate],currentItemPredicate=predicateCopy.shift();if(qubershipApihubJsonCrawl.isObject(currentItemPredicate)){const name=currentItemPredicate.name;state2.result[name]=pathItem,map.set(key,predicateCopy)}else switch(currentItemPredicate){case PREDICATE_ANY_VALUE:return map.set(key,predicateCopy);case PREDICATE_UNCLOSED_END:return map.set(key,[PREDICATE_UNCLOSED_END,...predicateCopy]);default:pathItem===currentItemPredicate?map.set(key,predicateCopy):map.delete(key)}})),{...state2,predicateMap})),{result:{},predicateMap});if(0!==state.predicateMap.size)return{path,predicate:predicates[state.predicateMap.keys().next().value],grepValues:state.result}}(path,predicates)),void 0),OPEN_API_HTTP_METHODS=["get","post","put","delete","patch","options","head","trace"],OPEN_API_PROPERTY_PARAMETERS="parameters",OPEN_API_PROPERTY_TAGS="tags",OPEN_API_PROPERTY_DEPRECATED="deprecated",OPEN_API_PROPERTY_REQUIRED="required",OPEN_API_PROPERTY_ALLOW_EMPTY_VALUE="allowEmptyValue",OPEN_API_PROPERTY_ALLOW_RESERVED="allowReserved",OPEN_API_PROPERTY_HEADERS="headers",OPEN_API_PROPERTY_EXAMPLES="examples",OPEN_API_PROPERTY_COMPONENTS="components",OPEN_API_PROPERTY_PATHS="paths",OPEN_API_PROPERTY_RESPONSES="responses",OPEN_API_PROPERTY_REQUEST_BODIES="requestBodies",OPEN_API_PROPERTY_SCHEMAS="schemas",OPEN_API_PROPERTY_LINKS="links",OPEN_API_PROPERTY_SECURITY_SCHEMAS="securitySchemes",OPEN_API_PROPERTY_ENCODING="encoding",startFromOpenApiComponents=jsonPath=>jsonPath.length>0&&"components"===jsonPath[0],openApiComponentsMatchResult=jsonPaths=>matchPaths(jsonPaths,[["components",PREDICATE_UNCLOSED_END]]),openApiComponentsResponsesMatchResult=jsonPaths=>matchPaths(jsonPaths,[["components","responses",PREDICATE_UNCLOSED_END]]),openApiComponentsHeadersMatchResult=jsonPaths=>matchPaths(jsonPaths,[["components","headers",PREDICATE_UNCLOSED_END]]),calculateHeaderName=(paths,key)=>{var _a;return openApiComponentsHeadersMatchResult(paths)?`'${declarationPathsToRefName(null==(_a=openApiComponentsHeadersMatchResult(paths))?void 0:_a.path)}'`:paths.some(startFromOpenApiComponents)?"":`'${key.toString()}'`},calculateHeaderPlace=(paths,suffix)=>{var _a;return matchPaths(paths,[["paths",PREDICATE_UNCLOSED_END]])?`${suffix}`:openApiComponentsResponsesMatchResult(paths)?`in '${declarationPathsToRefName(null==(_a=openApiComponentsResponsesMatchResult(paths))?void 0:_a.path)}'`:""};function declarationPathsToRefName(path=[]){return path.filter((item=>"deprecated"!==item)).join(".")}function nonEmptyString(str){return(null==str?void 0:str.length)?` ${str}`:""}const OPEN_API_DEPRECATION_RESOLVER=value=>getJsoProperty(value,"deprecated")?"x-deprecated-meta"in value&&"string"==typeof value["x-deprecated-meta"]?value["x-deprecated-meta"]:"":void 0,JSON_SCHEMA_DEPRECATION_RESOLVER=OPEN_API_DEPRECATION_RESOLVER,EMPTY_MARKER$2=Symbol("empty-items"),JSON_SCHEMA_DEFAULTS_COMMON={[JSON_SCHEMA_PROPERTY_ADDITIONAL_PROPERTIES]:!0,[JSON_SCHEMA_PROPERTY_MIN_LENGTH]:0,[JSON_SCHEMA_PROPERTY_MIN_PROPERTIES]:0,[JSON_SCHEMA_PROPERTY_MIN_ITEMS]:0,[JSON_SCHEMA_PROPERTY_UNIQUE_ITEMS]:!1,[JSON_SCHEMA_PROPERTY_REQUIRED]:EMPTY_MARKER$2,[JSON_SCHEMA_PROPERTY_PROPERTIES]:EMPTY_MARKER$2,[JSON_SCHEMA_PROPERTY_PATTERN_PROPERTIES]:EMPTY_MARKER$2},JSON_SCHEMA_DEFAULTS={[SPEC_TYPE_JSON_SCHEMA_04]:{...JSON_SCHEMA_DEFAULTS_COMMON,[JSON_SCHEMA_PROPERTY_EXCLUSIVE_MINIMUM]:!1,[JSON_SCHEMA_PROPERTY_EXCLUSIVE_MAXIMUM]:!1},[SPEC_TYPE_JSON_SCHEMA_06]:{...JSON_SCHEMA_DEFAULTS_COMMON},[SPEC_TYPE_JSON_SCHEMA_07]:{...JSON_SCHEMA_DEFAULTS_COMMON,[JSON_SCHEMA_PROPERTY_READ_ONLY]:!1,[JSON_SCHEMA_PROPERTY_WRITE_ONLY]:!1,[JSON_SCHEMA_PROPERTY_DEPRECATED]:!1}},JSON_SCHEMA_DEFAULTS_UNIFY_FUNCTION={[SPEC_TYPE_JSON_SCHEMA_04]:valueDefaults(JSON_SCHEMA_DEFAULTS["json-schema-04"]),[SPEC_TYPE_JSON_SCHEMA_06]:valueDefaults(JSON_SCHEMA_DEFAULTS["json-schema-06"]),[SPEC_TYPE_JSON_SCHEMA_07]:valueDefaults(JSON_SCHEMA_DEFAULTS[SPEC_TYPE_JSON_SCHEMA_07])},IGNORED_IN_FUTURE_ORIGINS=[],deepEqualsWithEmptySchema=(value,extraIgnoreProperties,opts)=>{const syntheticAny={...opts.syntheticMetaDefinitions.emptyJsonSchema(IGNORED_IN_FUTURE_ORIGINS)},nativeAny={...opts.nativeMetaDefinitions.emptyJsonSchema(IGNORED_IN_FUTURE_ORIGINS)};extraIgnoreProperties.forEach((key=>{delete syntheticAny[key],delete nativeAny[key]}));const compareConfig={cache:createEvaluationCacheService(),ignoreProperties:{...syntheticAny,...nativeAny,...[...extraIgnoreProperties].reduce(((collector,prop)=>(collector[prop]=ANY_VALUE,collector)),{})}};return deepCircularEqualsWithPropertyFilter(value,{},compareConfig)},JSON_SCHEMA_REPLACES_COMMON={[JSON_SCHEMA_PROPERTY_REQUIRED]:{mapping:new Map([[EMPTY_MARKER$2,{value:()=>[],reverseMatcher:deepEqualsMatcher([])}]])},[JSON_SCHEMA_PROPERTY_PROPERTIES]:{mapping:new Map([[EMPTY_MARKER$2,{value:()=>({}),reverseMatcher:deepEqualsMatcher({})}]])},[JSON_SCHEMA_PROPERTY_PATTERN_PROPERTIES]:{mapping:new Map([[EMPTY_MARKER$2,{value:()=>({}),reverseMatcher:deepEqualsMatcher({})}]])},[JSON_SCHEMA_PROPERTY_ADDITIONAL_PROPERTIES]:{mapping:new Map([[!0,{value:(origins,opts)=>opts.syntheticMetaDefinitions.emptyJsonSchema(origins),reverseMatcher:deepEqualsWithEmptySchema}],[!1,{value:(origins,opts)=>opts.syntheticMetaDefinitions.invertedEmptyJsonSchema(origins),reverseMatcher:(value,extraIgnoreProperties,opts)=>{const compareConfig={cache:createEvaluationCacheService(),ignoreProperties:{...opts.syntheticMetaDefinitions.invertedEmptyJsonSchema(IGNORED_IN_FUTURE_ORIGINS),...opts.nativeMetaDefinitions.invertedEmptyJsonSchema(IGNORED_IN_FUTURE_ORIGINS),[JSON_SCHEMA_PROPERTY_NOT]:{},...[...extraIgnoreProperties].reduce(((collector,prop)=>(collector[prop]=ANY_VALUE,collector)),{})}};return deepCircularEqualsWithPropertyFilter(value,{},compareConfig)}}]])}},JSON_SCHEMA_REPLACES={[SPEC_TYPE_JSON_SCHEMA_04]:{...JSON_SCHEMA_REPLACES_COMMON},[SPEC_TYPE_JSON_SCHEMA_06]:{...JSON_SCHEMA_REPLACES_COMMON},[SPEC_TYPE_JSON_SCHEMA_07]:{...JSON_SCHEMA_REPLACES_COMMON}},JSON_SCHEMA_REPLACES_UNIFY_FUNCTION={[SPEC_TYPE_JSON_SCHEMA_04]:valueReplaces(JSON_SCHEMA_REPLACES["json-schema-04"]),[SPEC_TYPE_JSON_SCHEMA_06]:valueReplaces(JSON_SCHEMA_REPLACES["json-schema-06"]),[SPEC_TYPE_JSON_SCHEMA_07]:valueReplaces(JSON_SCHEMA_REPLACES[SPEC_TYPE_JSON_SCHEMA_07])},versionSpecific={[SPEC_TYPE_JSON_SCHEMA_04]:()=>({}),[SPEC_TYPE_JSON_SCHEMA_06]:self=>({"/contentMediaType":{validate:checkType("string"),merge:last,hashStrategy:CURRENT_DATA_LEVEL},"/const":{validate:checkType(...TYPE_JSON_ANY),merge:equal,"/**":{validate:checkType(...TYPE_JSON_ANY)},hashStrategy:CURRENT_DATA_LEVEL},"/propertyNames":()=>{const common=self();return{...common,unify:insertIntoArrayByInstruction(concatArrays$1(common.unify),replaceValue(jsonSchemaTypeInfer,(allowedTypes=["string"],(jso,{origins,options})=>{if(!isReadyToTypeInfer(jso))return jso;if("type"in jso){const allowedTypesSet=new Set(allowedTypes),existingAndAllowedTypes=singleOrArrayToArray(jso.type).filter((value=>allowedTypesSet.has(value)));return 0===existingAndAllowedTypes.length?combineJsonSchemaWithMetaJso(jso,options.syntheticMetaDefinitions.invertedEmptyJsonSchema(origins),options):{...jso,[JSON_SCHEMA_PROPERTY_TYPE]:existingAndAllowedTypes}}return{...jso,[JSON_SCHEMA_PROPERTY_TYPE]:allowedTypes}}))),hashStrategy:CURRENT_DATA_LEVEL};var allowedTypes},"/contains":self,"/dependencies":{"/*":({value})=>Array.isArray(value)?{validate:checkType("array"),"/*":{validate:checkType("string")}}:self(),validate:checkType("object"),merge:dependenciesMergeResolver,hashStrategy:CURRENT_DATA_LEVEL},"/defs":{"/*":self,validate:checkType("object"),merge:mergeObjects,hashStrategy:CURRENT_DATA_LEVEL},"/additionalProperties":()=>({...self(),merge:additionalPropertiesMergeResolver,hashStrategy:"second-data-levels",newDataLayer:!0}),"/additionalItems":()=>({...self(),merge:additionalItemsMergeResolver,hashStrategy:CURRENT_DATA_LEVEL,newDataLayer:!0}),"/exclusiveMaximum":{validate:checkType("number"),merge:minValue,hashStrategy:CURRENT_DATA_LEVEL},"/exclusiveMinimum":{validate:checkType("number"),merge:maxValue,hashStrategy:CURRENT_DATA_LEVEL},validate:checkType("object","boolean")}),[SPEC_TYPE_JSON_SCHEMA_07]:self=>({...versionSpecific["json-schema-06"](self),"/readOnly":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/writeOnly":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/deprecated":{merge:or,validate:checkType("boolean"),hashStrategy:CURRENT_DATA_LEVEL}})},jsonSchemaRules=(version,self=(()=>jsonSchemaRules(version)))=>({"/type":({value})=>({..."string"==typeof value?{validate:[checkContains(...JSON_SCHEMA_NODE_TYPES)]}:{validate:checkType("array"),"/*":{validate:[checkType("string"),checkContains(...JSON_SCHEMA_NODE_TYPES)]}},merge:mergeTypes,hashStrategy:"second-data-levels"}),"/title":{validate:checkType("string"),merge:last},"/description":{validate:checkType("string"),merge:last},"/format":{validate:checkType("string"),merge:last,hashStrategy:CURRENT_DATA_LEVEL},"/default":{validate:checkType(...TYPE_JSON_ANY),merge:last,"/**":{validate:checkType(...TYPE_JSON_ANY)},hashStrategy:CURRENT_DATA_LEVEL},"/multipleOf":{validate:checkType("number"),merge:mergeMultipleOf,hashStrategy:CURRENT_DATA_LEVEL},"/maximum":{validate:checkType("number"),merge:minValue,hashStrategy:CURRENT_DATA_LEVEL},"/exclusiveMaximum":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/minimum":{validate:checkType("number"),merge:maxValue,hashStrategy:CURRENT_DATA_LEVEL},"/exclusiveMinimum":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/maxLength":{validate:checkType("number"),merge:minValue,hashStrategy:CURRENT_DATA_LEVEL},"/minLength":{validate:checkType("number"),merge:maxValue,hashStrategy:CURRENT_DATA_LEVEL},"/pattern":{validate:checkType("string"),merge:mergePattern,hashStrategy:CURRENT_DATA_LEVEL},"/maxItems":{validate:checkType("number"),merge:minValue,hashStrategy:CURRENT_DATA_LEVEL},"/minItems":{validate:checkType("number"),merge:maxValue,hashStrategy:CURRENT_DATA_LEVEL},"/uniqueItems":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/maxProperties":{validate:checkType("number"),merge:minValue,hashStrategy:CURRENT_DATA_LEVEL},"/minProperties":{validate:checkType("number"),merge:maxValue,hashStrategy:CURRENT_DATA_LEVEL},"/items":({value})=>({...Array.isArray(value)?{validate:[checkType("array")],"/*":{...self(),hashStrategy:"second-data-levels",newDataLayer:!0}}:{...self(),newDataLayer:!0},merge:itemsMergeResolver,hashStrategy:CURRENT_DATA_LEVEL}),deprecation:{deprecationResolver:ctx=>JSON_SCHEMA_DEPRECATION_RESOLVER(ctx),descriptionCalculator:ctx=>`[Deprecated] schema ${(ctx=>{var _a;return ctx.paths.some(startFromOpenApiComponents)?`in '${declarationPathsToRefName(null==(_a=openApiComponentsMatchResult(ctx.paths))?void 0:_a.path)}'`:`${ctx.suffix}`})(ctx)}`},"/additionalItems":({value})=>({..."boolean"==typeof value?{validate:[]}:{...self(),newDataLayer:!0},merge:additionalItemsMergeResolver,hashStrategy:CURRENT_DATA_LEVEL}),"/required":{validate:checkType("array"),merge:mergeStringSets,"/*":{validate:checkType("string"),hashStrategy:"second-data-levels"},hashStrategy:CURRENT_DATA_LEVEL},"/enum":{validate:checkType("array"),merge:mergeEnum,unify:unifyJsonSchemaEnums,"/**":{validate:checkType(...TYPE_JSON_ANY),hashStrategy:CURRENT_DATA_LEVEL},hashStrategy:CURRENT_DATA_LEVEL},"/properties":{"/*":()=>({...self(),newDataLayer:!0,hashStrategy:"second-data-levels"}),validate:checkType("object"),merge:propertiesMergeResolver,hashStrategy:CURRENT_DATA_LEVEL},"/additionalProperties":({value})=>({..."boolean"==typeof value?{validate:[]}:self(),merge:additionalPropertiesMergeResolver,hashStrategy:"second-data-levels",newDataLayer:!0}),"/patternProperties":{"/*":()=>({...self(),newDataLayer:!0,hashStrategy:"second-data-levels"}),validate:checkType("object"),merge:propertiesMergeResolver,hashStrategy:CURRENT_DATA_LEVEL},"/oneOf":{validate:checkType("array"),merge:mergeCombination,"/*":()=>({...self(),hashStrategy:"second-data-levels"}),hashStrategy:"second-data-levels"},"/anyOf":{validate:checkType("array"),merge:mergeCombination,"/*":self,hashStrategy:"second-data-levels"},"/not":()=>({...self(),merge:mergeNot,hashStrategy:"second-data-levels"}),"/examples":{validate:checkType("array"),merge:last,"/**":{validate:checkType(...TYPE_JSON_ANY)}},"/definitions":{"/*":self,validate:checkType("object"),merge:mergeObjects,hashStrategy:"second-data-levels"},"/allOf":{validate:checkType("array"),merge:concatArrays,"/*":self,hashStrategy:"second-data-levels"},"/$ref":{validate:checkType("string"),merge:concatString,hashStrategy:"second-data-levels"},validate:checkType("object"),merge:jsonSchemaMergeResolver,canLiftCombiners:!0,resolvedReferenceNamePropertyKey:"title",unify:[extractEmptyJsonSchema,jsonSchemaTypeInfer,JSON_SCHEMA_DEFAULTS_UNIFY_FUNCTION[version],JSON_SCHEMA_REPLACES_UNIFY_FUNCTION[version],splitJsonSchemaTypeArray,cleanJsonSchemaTypeSpecificProperties,unifyJsonSchemaRequired,cleanUpSyntheticJsonSchemaTypes],mandatoryUnify:[forwardOnlyCleanUpSyntheticJsonSchemaTypes],...versionSpecific[version](self),hashStrategy:CURRENT_DATA_LEVEL,hashOwner:!0});var exports2,OpenAPIV3,HttpMethods,OpenAPIV2;(exports2={}).__esModule=!0,exports2.OpenAPIV2=exports2.OpenAPIV3=void 0,OpenAPIV3=exports2.OpenAPIV3||(exports2.OpenAPIV3={}),(HttpMethods=OpenAPIV3.HttpMethods||(OpenAPIV3.HttpMethods={})).GET="get",HttpMethods.PUT="put",HttpMethods.POST="post",HttpMethods.DELETE="delete",HttpMethods.OPTIONS="options",HttpMethods.HEAD="head",HttpMethods.PATCH="patch",HttpMethods.TRACE="trace",function(HttpMethods){HttpMethods.GET="get",HttpMethods.PUT="put",HttpMethods.POST="post",HttpMethods.DELETE="delete",HttpMethods.OPTIONS="options",HttpMethods.HEAD="head",HttpMethods.PATCH="patch"}((OpenAPIV2=exports2.OpenAPIV2||(exports2.OpenAPIV2={})).HttpMethods||(OpenAPIV2.HttpMethods={}));const pathItemsUnification=(value,{options})=>{if(!qubershipApihubJsonCrawl.isObject(value))return value;const pathItem=value,{parameters:pathParameters,servers:pathServers,summary:pathSummary,description:pathDescription,...restItems}=pathItem;if(!(pathParameters||pathServers||pathSummary||pathDescription))return value;const{symbols,extensionKeys}=Reflect.ownKeys(restItems).reduce(((result,key)=>("symbol"==typeof key&&(result.symbols[key]=value[key]),"string"==typeof key&&key.startsWith("x-")&&result.extensionKeys.add(key),result)),{symbols:{},extensionKeys:new Set}),newPathItem=OPEN_API_HTTP_METHODS.reduce(((result,method)=>{const operation=pathItem[method];return operation?(result[method]=operation,concatenateArraysInProperty(pathItem,operation,"parameters",options.originsFlag),concatenateArraysInProperty(pathItem,operation,"servers",options.originsFlag),void 0===operation.summary&&void 0!==pathSummary&&copyProperty(pathItem,operation,"summary",options.originsFlag),void 0===operation.description&&void 0!==pathDescription&&copyProperty(pathItem,operation,"description",options.originsFlag),extensionKeys.forEach((extensionKey=>{extensionKey in operation||copyProperty(pathItem,operation,extensionKey,options.originsFlag)})),result):result}),{...symbols});return cleanSeveralOrigins(newPathItem,["parameters","servers","summary","description",...extensionKeys],options.originsFlag),0===Object.keys(newPathItem).length?value:newPathItem},OPEN_API_30_JSON_SCHEMA_NODE_TYPES=["boolean","string","number","integer","object","array"],EMPTY_MARKER$1=Symbol("empty-items"),TO_EMPTY_OBJECT_MAPPING$1={mapping:new Map([[EMPTY_MARKER$1,{value:()=>({}),reverseMatcher:deepEqualsMatcher({})}]])},TO_EMPTY_ARRAY_MAPPING$1={mapping:new Map([[EMPTY_MARKER$1,{value:()=>[],reverseMatcher:deepEqualsMatcher([])}]])},OPEN_API_30_JSON_SCHEMA_DEFAULTS={...JSON_SCHEMA_DEFAULTS["json-schema-04"],[JSON_SCHEMA_PROPERTY_NULLABLE]:!1,[JSON_SCHEMA_PROPERTY_READ_ONLY]:!1,[JSON_SCHEMA_PROPERTY_WRITE_ONLY]:!1,[JSON_SCHEMA_PROPERTY_DEPRECATED]:!1,[JSON_SCHEMA_PROPERTY_ITEMS]:EMPTY_MARKER$1};delete OPEN_API_30_JSON_SCHEMA_DEFAULTS.patternProperties;const OPEN_API_30_JSON_SCHEMA_REPLACES={...JSON_SCHEMA_REPLACES["json-schema-04"],[JSON_SCHEMA_PROPERTY_ITEMS]:{mapping:new Map([[EMPTY_MARKER$1,{value:(origins,opts)=>opts.syntheticMetaDefinitions.emptyJsonSchema(origins),reverseMatcher:deepEqualsWithEmptySchema}]])}};delete OPEN_API_30_JSON_SCHEMA_REPLACES.patternProperties;const OPEN_API_OPERATION_DEFAULTS={[OPEN_API_PROPERTY_PARAMETERS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_TAGS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_DEPRECATED]:!1},OPEN_API_OPERATION_REPLACES={[OPEN_API_PROPERTY_PARAMETERS]:TO_EMPTY_ARRAY_MAPPING$1,[OPEN_API_PROPERTY_TAGS]:TO_EMPTY_ARRAY_MAPPING$1},OPEN_API_RESPONSE_DEFAULTS={[OPEN_API_PROPERTY_HEADERS]:EMPTY_MARKER$1},OPEN_API_RESPONSE_REPLACES={[OPEN_API_PROPERTY_HEADERS]:TO_EMPTY_OBJECT_MAPPING$1},OPEN_API_ENCODING_DEFAULTS={[OPEN_API_PROPERTY_HEADERS]:EMPTY_MARKER$1},OPEN_API_ENCODING_REPLACES={[OPEN_API_PROPERTY_HEADERS]:TO_EMPTY_OBJECT_MAPPING$1},OPEN_API_PARAMETER_DEFAULTS={[OPEN_API_PROPERTY_DEPRECATED]:!1,[OPEN_API_PROPERTY_REQUIRED]:!1,[OPEN_API_PROPERTY_ALLOW_EMPTY_VALUE]:!1,[OPEN_API_PROPERTY_ALLOW_RESERVED]:!1,[OPEN_API_PROPERTY_EXAMPLES]:EMPTY_MARKER$1},OPEN_API_PARAMETER_REPLACES={[OPEN_API_PROPERTY_EXAMPLES]:TO_EMPTY_OBJECT_MAPPING$1},OPEN_API_HEADER_DEFAULTS={...OPEN_API_PARAMETER_DEFAULTS},OPEN_API_HEADER_REPLACES={...OPEN_API_PARAMETER_REPLACES},OPEN_API_MEDIA_TYPE_DEFAULTS={[OPEN_API_PROPERTY_EXAMPLES]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_ENCODING]:EMPTY_MARKER$1},OPEN_API_MEDIA_TYPE_REPLACES={[OPEN_API_PROPERTY_EXAMPLES]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_ENCODING]:TO_EMPTY_OBJECT_MAPPING$1},OPEN_API_ROOT_DEFAULTS={[OPEN_API_PROPERTY_PATHS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_COMPONENTS]:EMPTY_MARKER$1},OPEN_API_ROOT_REPLACES={[OPEN_API_PROPERTY_PATHS]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_COMPONENTS]:TO_EMPTY_OBJECT_MAPPING$1},OPEN_API_COMPONENTS_DEFAULTS={[OPEN_API_PROPERTY_SECURITY_SCHEMAS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_LINKS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_SCHEMAS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_RESPONSES]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_PARAMETERS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_REQUEST_BODIES]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_HEADERS]:EMPTY_MARKER$1,[OPEN_API_PROPERTY_EXAMPLES]:EMPTY_MARKER$1},OPEN_API_COMPONENTS_REPLACES={[OPEN_API_PROPERTY_SECURITY_SCHEMAS]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_LINKS]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_SCHEMAS]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_RESPONSES]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_PARAMETERS]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_REQUEST_BODIES]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_HEADERS]:TO_EMPTY_OBJECT_MAPPING$1,[OPEN_API_PROPERTY_EXAMPLES]:TO_EMPTY_OBJECT_MAPPING$1},openApiExtensionRulesFunction=elseRules=>({"/*":ctx=>{const{key}=ctx;return"string"==typeof key&&key.startsWith("x-")?{isExtension:!0,validate:checkType(...TYPE_JSON_ANY),merge:last,"/**":{validate:checkType(...TYPE_JSON_ANY)}}:"function"==typeof elseRules?elseRules():elseRules}}),openApiExtensionRules=openApiExtensionRulesFunction({validate:()=>!1}),openApiExternalDocsRules={"/externalDocs":{validate:checkType("object"),merge:last,"/description":{validate:checkType("string")},"/url":{validate:checkType("string")},...openApiExtensionRules}},openApiExampleRules={"/example":{validate:checkType(...TYPE_JSON_ANY),"/**":{validate:checkType(...TYPE_JSON_ANY)}}},openApiExamplesRules={"/examples":{validate:checkType("object"),merge:last,"/*":{...openApiExtensionRulesFunction({validate:checkType(...TYPE_JSON_ANY)})},"/**":{validate:checkType(...TYPE_JSON_ANY)}}},openApiOAuthScopesRules={"/*":{validate:checkType("string")},validate:checkType("object")},openApiServerRules={"/url":{validate:checkType("string")},"/description":{validate:checkType("string")},"/variables":{"/*":{"/enum":{"/*":{validate:checkType("string")},validate:checkType("array")},"/default":{validate:checkType("string")},"/description":{validate:checkType("string")},...openApiExtensionRules,validate:checkType("object")},validate:checkType("object")},...openApiExtensionRules,validate:checkType("object")},openApiServersRules={"/servers":{"/*":openApiServerRules,validate:checkType("array")}},openApiSecurityRules={"/security":{"/*":{"/*":{"/*":{validate:checkType("string")},validate:checkType("array")},validate:checkType("object")},validate:checkType("array")}},openApiLinksRules={"/*":{"/operationId":{validate:checkType("string")},"/operationRef":{validate:checkType("string")},"/parameters":{"/**":{validate:checkType(...TYPE_JSON_ANY)},validate:checkType("object")},"/requestBody":{"/**":{validate:checkType(...TYPE_JSON_ANY)},validate:checkType(...TYPE_JSON_ANY)},"/description":{validate:checkType("string")},"/server":openApiServerRules,...openApiExtensionRules,validate:checkType("object")},validate:checkType("object")},openApiJsonSchemaExtensionRules=()=>({"/xml":{validate:checkType(...TYPE_JSON_ANY),merge:mergeObjects,...openApiExtensionRulesFunction({validate:checkType(...TYPE_JSON_ANY)}),"/**":{validate:checkType(...TYPE_JSON_ANY)}},"/discriminator":{validate:checkType("object"),merge:last,"/propertyName":{validate:checkType("string"),merge:last},"/mapping":{validate:checkType("object"),merge:last,"/*":{validate:checkType("string"),merge:last}}},...openApiExternalDocsRules,...openApiExtensionRules}),customFor30JsonSchemaRules=(()=>{const core=jsonSchemaRules("json-schema-04",(()=>customFor30JsonSchemaRules)),extension=openApiJsonSchemaExtensionRules();return{...core,...extension,"/type":{validate:[checkType("string"),checkContains(...OPEN_API_30_JSON_SCHEMA_NODE_TYPES)],merge:mergeTypes,hashStrategy:"second-data-levels"},"/items":()=>({...customFor30JsonSchemaRules,merge:itemsMergeResolver,hashStrategy:CURRENT_DATA_LEVEL,newDataLayer:!0}),"/additionalItems":{validate:()=>!1,hashStrategy:"second-data-levels",newDataLayer:!0},"/patternProperties":{validate:()=>!1,hashStrategy:"second-data-levels",newDataLayer:!0},"/readOnly":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/writeOnly":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/deprecated":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/nullable":{validate:checkType("boolean"),merge:or,hashStrategy:CURRENT_DATA_LEVEL},"/example":{validate:checkType(...TYPE_JSON_ANY),merge:last,"/**":{validate:checkType(...TYPE_JSON_ANY)},hashStrategy:CURRENT_DATA_LEVEL},unify:insertIntoArrayByInstruction(concatArrays$1(core.unify,extension.unify),replaceValue(JSON_SCHEMA_DEFAULTS_UNIFY_FUNCTION["json-schema-04"],valueDefaults(OPEN_API_30_JSON_SCHEMA_DEFAULTS)),replaceValue(JSON_SCHEMA_REPLACES_UNIFY_FUNCTION["json-schema-04"],valueReplaces(OPEN_API_30_JSON_SCHEMA_REPLACES)),replaceValue(jsonSchemaTypeInfer,jsonSchemaTypeInferWithRestriction(OPEN_API_30_JSON_SCHEMA_NODE_TYPES)))}})(),customFor31JsonSchemaRules={...jsonSchemaRules(SPEC_TYPE_JSON_SCHEMA_07,(()=>customFor31JsonSchemaRules)),...openApiJsonSchemaExtensionRules()},openApiJsonSchemaRules=version=>{switch(version){case SPEC_TYPE_OPEN_API_30:return customFor30JsonSchemaRules;case SPEC_TYPE_OPEN_API_31:return customFor31JsonSchemaRules}},openApiMediaTypesRules=version=>({"/*":{"/schema":openApiJsonSchemaRules(version),deprecation:{inlineDescriptionSuffixCalculator:ctx=>`${ctx.suffix} (${ctx.key.toString()})`},...openApiExampleRules,...openApiExamplesRules,"/encoding":{"/*":{deprecation:{inlineDescriptionSuffixCalculator:ctx=>`in encoding '${ctx.key.toString()}' ${ctx.suffix}`},"/contentType":{validate:checkType("string")},"/headers":()=>openApiHeadersRules(version),"/style":{validate:checkType("string")},"/explode":{validate:checkType("boolean")},"/allowReserved":{validate:checkType("boolean")},unify:[valueDefaults(OPEN_API_ENCODING_DEFAULTS),valueReplaces(OPEN_API_ENCODING_REPLACES)],validate:checkType("object"),...openApiExtensionRules},validate:checkType("object")},...openApiExtensionRules,unify:[valueDefaults(OPEN_API_MEDIA_TYPE_DEFAULTS),valueReplaces(OPEN_API_MEDIA_TYPE_REPLACES)],validate:checkType("object")},validate:checkType("object")}),openApiHeadersRules=version=>({"/*":{deprecation:{deprecationResolver:ctx=>OPEN_API_DEPRECATION_RESOLVER(ctx),descriptionCalculator:ctx=>`[Deprecated] header${nonEmptyString(calculateHeaderName(ctx.paths,ctx.key))}${nonEmptyString(calculateHeaderPlace(ctx.paths,ctx.suffix))}`,inlineDescriptionSuffixCalculator:ctx=>`in header '${ctx.key.toString()}' ${ctx.suffix}`},"/description":{validate:checkType("string")},"/required":{validate:checkType("boolean")},"/deprecated":{validate:checkType("boolean")},"/allowEmptyValue":{validate:checkType("boolean")},"/style":{validate:checkType("string")},"/explode":{validate:checkType("boolean")},"/allowReserved":{validate:checkType("boolean")},"/content":openApiMediaTypesRules(version),...openApiExampleRules,...openApiExamplesRules,"/schema":openApiJsonSchemaRules(version),...openApiExtensionRules,validate:checkType("object"),unify:[valueDefaults(OPEN_API_HEADER_DEFAULTS),valueReplaces(OPEN_API_HEADER_REPLACES)]},deprecation:{inlineDescriptionSuffixCalculator:ctx=>`${ctx.suffix}`},validate:checkType("object")}),openApiParametersRules=version=>({"/*":{deprecation:{inlineDescriptionSuffixCalculator:ctx=>`in ${ctx.source.in} parameter '${ctx.source.name}'`,deprecationResolver:ctx=>OPEN_API_DEPRECATION_RESOLVER(ctx),descriptionCalculator:ctx=>`[Deprecated] ${ctx.source.in} parameter ${function calculateParameterName(ctx){var _a;return ctx.paths.every(startFromOpenApiComponents)?`'${declarationPathsToRefName(null==(_a=openApiComponentsMatchResult(ctx.paths))?void 0:_a.path)}'`:`'${ctx.source.name}'`}(ctx)}`},"/name":{validate:checkType("string"),hashStrategy:CURRENT_DATA_LEVEL},"/in":{validate:checkType("string"),hashStrategy:CURRENT_DATA_LEVEL},"/description":{validate:checkType("string")},"/required":{validate:checkType("boolean"),hashStrategy:CURRENT_DATA_LEVEL},"/deprecated":{validate:checkType("boolean"),hashStrategy:CURRENT_DATA_LEVEL},"/allowEmptyValue":{validate:checkType("boolean"),hashStrategy:CURRENT_DATA_LEVEL},"/style":{validate:checkType("string"),hashStrategy:CURRENT_DATA_LEVEL},"/explode":{validate:checkType("boolean"),hashStrategy:CURRENT_DATA_LEVEL},"/allowReserved":{validate:checkType("boolean"),hashStrategy:CURRENT_DATA_LEVEL},"/content":openApiMediaTypesRules(version),...openApiExampleRules,...openApiExamplesRules,"/schema":()=>({...openApiJsonSchemaRules(version),newDataLayer:!0}),...openApiExtensionRules,validate:checkType("object"),unify:[valueDefaults(OPEN_API_PARAMETER_DEFAULTS),valueReplaces(OPEN_API_PARAMETER_REPLACES)],hashStrategy:"second-data-levels",hashOwner:!0},validate:checkType("array")}),openApiRequestRules=version=>({"/description":{validate:checkType("string")},"/required":{validate:checkType("boolean")},"/content":openApiMediaTypesRules(version),...openApiExtensionRules,validate:checkType("object"),deprecation:{inlineDescriptionSuffixCalculator:()=>"in request body"}}),openApiResponsesRules=version=>({...openApiExtensionRulesFunction({"/description":{validate:checkType("string")},"/headers":openApiHeadersRules(version),"/content":openApiMediaTypesRules(version),"/links":openApiLinksRules,...openApiExtensionRules,unify:[valueDefaults(OPEN_API_RESPONSE_DEFAULTS),valueReplaces(OPEN_API_RESPONSE_REPLACES)],validate:checkType("object"),deprecation:{inlineDescriptionSuffixCalculator:ctx=>`${ctx.suffix} '${ctx.key.toString()}'`}}),deprecation:{inlineDescriptionSuffixCalculator:()=>"in response"},validate:checkType("object")}),openApiPathItemRules=version=>({deprecation:{inlineDescriptionSuffixCalculator:ctx=>`${ctx.key.toString()}`},"/summary":{validate:checkType("string")},"/description":{validate:checkType("string")},"/servers":{"/*":openApiServerRules,validate:checkType("array")},...openApiExtensionRulesFunction({deprecation:{deprecationResolver:ctx=>OPEN_API_DEPRECATION_RESOLVER(ctx),descriptionCalculator:ctx=>`[Deprecated] operation ${ctx.key.toString().toUpperCase()} ${ctx.suffix}`},"/tags":{"/*":{validate:checkType("string")},validate:checkType("array")},"/summary":{validate:checkType("string")},"/description":{validate:checkType("string")},...openApiExternalDocsRules,"/operationId":{validate:checkType("string")},"/callbacks":{"/*":{...openApiExtensionRulesFunction((()=>openApiPathItemRules(version)))}},"/deprecated":{validate:checkType("boolean")},...openApiSecurityRules,...openApiServersRules,"/parameters":openApiParametersRules(version),"/requestBody":openApiRequestRules(version),"/responses":openApiResponsesRules(version),...openApiExtensionRules,unify:[valueDefaults(OPEN_API_OPERATION_DEFAULTS),valueReplaces(OPEN_API_OPERATION_REPLACES)],validate:checkType("object")}),"/parameters":openApiParametersRules(version),validate:checkType("object"),unify:pathItemsUnification}),openApiRules=version=>({"/openapi":{validate:checkType("string")},"/info":{"/title":{validate:checkType("string")},"/description":{validate:checkType("string")},"/termsOfService":{validate:checkType("string")},"/contact":{"/name":{validate:checkType("string")},"/url":{validate:checkType("string")},"/email":{validate:checkType("string")},...openApiExtensionRules,validate:checkType("object")},"/license":{"/name":{validate:checkType("string")},"/url":{validate:checkType("string")},...openApiExtensionRules,validate:checkType("object")},"/version":{validate:checkType("string")},...openApiExtensionRules,validate:checkType("object")},...openApiExternalDocsRules,...openApiServersRules,...openApiSecurityRules,"/tags":{"/*":{"/name":{validate:checkType("string")},"/description":{validate:checkType("string")},...openApiExternalDocsRules,...openApiExtensionRules,validate:checkType("object")},validate:checkType("array")},"/paths":{...openApiExtensionRulesFunction(openApiPathItemRules(version)),validate:checkType("object")},"/components":{"/securitySchemes":{"/*":{"/type":{validate:checkType("string")},"/name":{validate:checkType("string")},"/in":{validate:checkType("string")},"/description":{validate:checkType("string")},"/scheme":{validate:checkType("string")},"/bearerFormat":{validate:checkType("string")},"/flows":{"/implicit":{"/authorizationUrl":{validate:checkType("string")},"/refreshUrl":{validate:checkType("string")},"/scopes":openApiOAuthScopesRules,...openApiExtensionRules,validate:checkType("object")},"/password":{"/tokenUrl":{validate:checkType("string")},"/refreshUrl":{validate:checkType("string")},"/scopes":openApiOAuthScopesRules,...openApiExtensionRules,validate:checkType("object")},"/clientCredentials":{"/tokenUrl":{validate:checkType("string")},"/refreshUrl":{validate:checkType("string")},"/scopes":openApiOAuthScopesRules,...openApiExtensionRules,validate:checkType("object")},"/authorizationCode":{"/authorizationUrl":{validate:checkType("string")},"/tokenUrl":{validate:checkType("string")},"/refreshUrl":{validate:checkType("string")},"/scopes":openApiOAuthScopesRules,...openApiExtensionRules,validate:checkType("object")},...openApiExtensionRules,validate:checkType("object")},"/openIdConnectUrl":{validate:checkType("string")},validate:checkType("object"),...openApiExtensionRules},validate:checkType("object")},"/links":openApiLinksRules,"/schemas":{"/*":openApiJsonSchemaRules(version),validate:checkType("object")},"/responses":openApiResponsesRules(version),"/parameters":{...openApiParametersRules(version),validate:checkType("object")},"/requestBodies":{"/*":openApiRequestRules(version),validate:checkType("object")},"/headers":openApiHeadersRules(version),"/callbacks":{"/*":{...openApiExtensionRulesFunction((()=>openApiPathItemRules(version)))}},...openApiExamplesRules,...openApiExtensionRules,validate:checkType("object"),unify:[valueDefaults(OPEN_API_COMPONENTS_DEFAULTS),valueReplaces(OPEN_API_COMPONENTS_REPLACES)]},...openApiExtensionRules,unify:[valueDefaults(OPEN_API_ROOT_DEFAULTS),valueReplaces(OPEN_API_ROOT_REPLACES)]});function devAssert(condition,message){if(!Boolean(condition))throw new Error(message)}function isObjectLike(value){return"object"==typeof value&&null!==value}function invariant(condition,message){if(!Boolean(condition))throw new Error("Unexpected invariant triggered.")}const LineRegExp=/\r\n|[\n\r]/g;function getLocation(source,position){let lastLineStart=0,line=1;for(const match of source.body.matchAll(LineRegExp)){if("number"==typeof match.index||invariant(!1),match.index>=position)break;lastLineStart=match.index+match[0].length,line+=1}return{line,column:position+1-lastLineStart}}function printSourceLocation(source,sourceLocation){const firstLineColumnOffset=source.locationOffset.column-1,body="".padStart(firstLineColumnOffset)+source.body,lineIndex=sourceLocation.line-1,lineOffset=source.locationOffset.line-1,lineNum=sourceLocation.line+lineOffset,columnOffset=1===sourceLocation.line?firstLineColumnOffset:0,columnNum=sourceLocation.column+columnOffset,locationStr=`${source.name}:${lineNum}:${columnNum}\n`,lines=body.split(/\r\n|[\n\r]/g),locationLine=lines[lineIndex];if(locationLine.length>120){const subLineIndex=Math.floor(columnNum/80),subLineColumnNum=columnNum%80,subLines=[];for(let i=0;i<locationLine.length;i+=80)subLines.push(locationLine.slice(i,i+80));return locationStr+printPrefixedLines([[`${lineNum} |`,subLines[0]],...subLines.slice(1,subLineIndex+1).map((subLine=>["|",subLine])),["|","^".padStart(subLineColumnNum)],["|",subLines[subLineIndex+1]]])}return locationStr+printPrefixedLines([[lineNum-1+" |",lines[lineIndex-1]],[`${lineNum} |`,locationLine],["|","^".padStart(columnNum)],[`${lineNum+1} |`,lines[lineIndex+1]]])}function printPrefixedLines(lines){const existingLines=lines.filter((([_,line])=>void 0!==line)),padLen=Math.max(...existingLines.map((([prefix])=>prefix.length)));return existingLines.map((([prefix,line])=>prefix.padStart(padLen)+(line?" "+line:""))).join("\n")}class GraphQLError extends Error{constructor(message,...rawArgs){var _this$nodes,_nodeLocations$,_ref;const{nodes,source,positions,path,originalError,extensions}=function toNormalizedOptions(args){const firstArg=args[0];return null==firstArg||"kind"in firstArg||"length"in firstArg?{nodes:firstArg,source:args[1],positions:args[2],path:args[3],originalError:args[4],extensions:args[5]}:firstArg}(rawArgs);super(message),this.name="GraphQLError",this.path=null!=path?path:void 0,this.originalError=null!=originalError?originalError:void 0,this.nodes=undefinedIfEmpty(Array.isArray(nodes)?nodes:nodes?[nodes]:void 0);const nodeLocations=undefinedIfEmpty(null===(_this$nodes=this.nodes)||void 0===_this$nodes?void 0:_this$nodes.map((node=>node.loc)).filter((loc=>null!=loc)));this.source=null!=source?source:null==nodeLocations||null===(_nodeLocations$=nodeLocations[0])||void 0===_nodeLocations$?void 0:_nodeLocations$.source,this.positions=null!=positions?positions:null==nodeLocations?void 0:nodeLocations.map((loc=>loc.start)),this.locations=positions&&source?positions.map((pos=>getLocation(source,pos))):null==nodeLocations?void 0:nodeLocations.map((loc=>getLocation(loc.source,loc.start)));const originalExtensions=isObjectLike(null==originalError?void 0:originalError.extensions)?null==originalError?void 0:originalError.extensions:void 0;this.extensions=null!==(_ref=null!=extensions?extensions:originalExtensions)&&void 0!==_ref?_ref:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=originalError&&originalError.stack?Object.defineProperty(this,"stack",{value:originalError.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,GraphQLError):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let output=this.message;if(this.nodes)for(const node of this.nodes)node.loc&&(output+="\n\n"+printSourceLocation((location=node.loc).source,getLocation(location.source,location.start)));else if(this.source&&this.locations)for(const location of this.locations)output+="\n\n"+printSourceLocation(this.source,location);var location;return output}toJSON(){const formattedError={message:this.message};return null!=this.locations&&(formattedError.locations=this.locations),null!=this.path&&(formattedError.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(formattedError.extensions=this.extensions),formattedError}}function undefinedIfEmpty(array){return void 0===array||0===array.length?void 0:array}const QueryDocumentKeys={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},kindValues=new Set(Object.keys(QueryDocumentKeys));function isNode(maybeNode){const maybeKind=null==maybeNode?void 0:maybeNode.kind;return"string"==typeof maybeKind&&kindValues.has(maybeKind)}var OperationTypeNode,OperationTypeNode2,DirectiveLocation,DirectiveLocation2,Kind,Kind2;function isWhiteSpace(code){return 9===code||32===code}function isLetter(code){return code>=97&&code<=122||code>=65&&code<=90}(OperationTypeNode2=OperationTypeNode||(OperationTypeNode={})).QUERY="query",OperationTypeNode2.MUTATION="mutation",OperationTypeNode2.SUBSCRIPTION="subscription",(DirectiveLocation2=DirectiveLocation||(DirectiveLocation={})).QUERY="QUERY",DirectiveLocation2.MUTATION="MUTATION",DirectiveLocation2.SUBSCRIPTION="SUBSCRIPTION",DirectiveLocation2.FIELD="FIELD",DirectiveLocation2.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",DirectiveLocation2.FRAGMENT_SPREAD="FRAGMENT_SPREAD",DirectiveLocation2.INLINE_FRAGMENT="INLINE_FRAGMENT",DirectiveLocation2.VARIABLE_DEFINITION="VARIABLE_DEFINITION",DirectiveLocation2.SCHEMA="SCHEMA",DirectiveLocation2.SCALAR="SCALAR",DirectiveLocation2.OBJECT="OBJECT",DirectiveLocation2.FIELD_DEFINITION="FIELD_DEFINITION",DirectiveLocation2.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",DirectiveLocation2.INTERFACE="INTERFACE",DirectiveLocation2.UNION="UNION",DirectiveLocation2.ENUM="ENUM",DirectiveLocation2.ENUM_VALUE="ENUM_VALUE",DirectiveLocation2.INPUT_OBJECT="INPUT_OBJECT",DirectiveLocation2.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION",(Kind2=Kind||(Kind={})).NAME="Name",Kind2.DOCUMENT="Document",Kind2.OPERATION_DEFINITION="OperationDefinition",Kind2.VARIABLE_DEFINITION="VariableDefinition",Kind2.SELECTION_SET="SelectionSet",Kind2.FIELD="Field",Kind2.ARGUMENT="Argument",Kind2.FRAGMENT_SPREAD="FragmentSpread",Kind2.INLINE_FRAGMENT="InlineFragment",Kind2.FRAGMENT_DEFINITION="FragmentDefinition",Kind2.VARIABLE="Variable",Kind2.INT="IntValue",Kind2.FLOAT="FloatValue",Kind2.STRING="StringValue",Kind2.BOOLEAN="BooleanValue",Kind2.NULL="NullValue",Kind2.ENUM="EnumValue",Kind2.LIST="ListValue",Kind2.OBJECT="ObjectValue",Kind2.OBJECT_FIELD="ObjectField",Kind2.DIRECTIVE="Directive",Kind2.NAMED_TYPE="NamedType",Kind2.LIST_TYPE="ListType",Kind2.NON_NULL_TYPE="NonNullType",Kind2.SCHEMA_DEFINITION="SchemaDefinition",Kind2.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",Kind2.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",Kind2.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",Kind2.FIELD_DEFINITION="FieldDefinition",Kind2.INPUT_VALUE_DEFINITION="InputValueDefinition",Kind2.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",Kind2.UNION_TYPE_DEFINITION="UnionTypeDefinition",Kind2.ENUM_TYPE_DEFINITION="EnumTypeDefinition",Kind2.ENUM_VALUE_DEFINITION="EnumValueDefinition",Kind2.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",Kind2.DIRECTIVE_DEFINITION="DirectiveDefinition",Kind2.SCHEMA_EXTENSION="SchemaExtension",Kind2.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",Kind2.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",Kind2.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",Kind2.UNION_TYPE_EXTENSION="UnionTypeExtension",Kind2.ENUM_TYPE_EXTENSION="EnumTypeExtension",Kind2.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension";const MAX_ARRAY_LENGTH=10,MAX_RECURSIVE_DEPTH=2;function inspect(value){return formatValue(value,[])}function formatValue(value,seenValues){switch(typeof value){case"string":return JSON.stringify(value);case"function":return value.name?`[function ${value.name}]`:"[function]";case"object":return function formatObjectValue(value,previouslySeenValues){if(null===value)return"null";if(previouslySeenValues.includes(value))return"[Circular]";const seenValues=[...previouslySeenValues,value];if(function isJSONable(value){return"function"==typeof value.toJSON}(value)){const jsonValue=value.toJSON();if(jsonValue!==value)return"string"==typeof jsonValue?jsonValue:formatValue(jsonValue,seenValues)}else if(Array.isArray(value))return function formatArray(array,seenValues){if(0===array.length)return"[]";if(seenValues.length>MAX_RECURSIVE_DEPTH)return"[Array]";const len=Math.min(MAX_ARRAY_LENGTH,array.length),remaining=array.length-len,items=[];for(let i=0;i<len;++i)items.push(formatValue(array[i],seenValues));1===remaining?items.push("... 1 more item"):remaining>1&&items.push(`... ${remaining} more items`);return"["+items.join(", ")+"]"}(value,seenValues);return function formatObject(object,seenValues){const entries=Object.entries(object);if(0===entries.length)return"{}";if(seenValues.length>MAX_RECURSIVE_DEPTH)return"["+function getObjectTag(object){const tag=Object.prototype.toString.call(object).replace(/^\[object /,"").replace(/]$/,"");if("Object"===tag&&"function"==typeof object.constructor){const name=object.constructor.name;if("string"==typeof name&&""!==name)return name}return tag}(object)+"]";const properties=entries.map((([key,value])=>key+": "+formatValue(value,seenValues)));return"{ "+properties.join(", ")+" }"}(value,seenValues)}(value,seenValues);default:return String(value)}}const instanceOf=globalThis.process&&!0?function instanceOf2(value,constructor){return value instanceof constructor}:function instanceOf3(value,constructor){if(value instanceof constructor)return!0;if("object"==typeof value&&null!==value){var _value$constructor;const className=constructor.prototype[Symbol.toStringTag];if(className===(Symbol.toStringTag in value?value[Symbol.toStringTag]:null===(_value$constructor=value.constructor)||void 0===_value$constructor?void 0:_value$constructor.name)){const stringifiedValue=inspect(value);throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`)}}return!1},MAX_SUGGESTIONS=5;function identityFunc(x){return x}function keyValMap(list,keyFn,valFn){const result=Object.create(null);for(const item of list)result[keyFn(item)]=valFn(item);return result}function mapValue(map,fn){const result=Object.create(null);for(const key of Object.keys(map))result[key]=fn(map[key],key);return result}const DIGIT_0=48,DIGIT_9=57;function isDigit(code){return!isNaN(code)&&DIGIT_0<=code&&code<=DIGIT_9}function suggestionList(input,options){const optionsByDistance=Object.create(null),lexicalDistance=new LexicalDistance(input),threshold=Math.floor(.4*input.length)+1;for(const option of options){const distance=lexicalDistance.measure(option,threshold);void 0!==distance&&(optionsByDistance[option]=distance)}return Object.keys(optionsByDistance).sort(((a,b)=>{const distanceDiff=optionsByDistance[a]-optionsByDistance[b];return 0!==distanceDiff?distanceDiff:function naturalCompare(aStr,bStr){let aIndex=0,bIndex=0;for(;aIndex<aStr.length&&bIndex<bStr.length;){let aChar=aStr.charCodeAt(aIndex),bChar=bStr.charCodeAt(bIndex);if(isDigit(aChar)&&isDigit(bChar)){let aNum=0;do{++aIndex,aNum=10*aNum+aChar-DIGIT_0,aChar=aStr.charCodeAt(aIndex)}while(isDigit(aChar)&&aNum>0);let bNum=0;do{++bIndex,bNum=10*bNum+bChar-DIGIT_0,bChar=bStr.charCodeAt(bIndex)}while(isDigit(bChar)&&bNum>0);if(aNum<bNum)return-1;if(aNum>bNum)return 1}else{if(aChar<bChar)return-1;if(aChar>bChar)return 1;++aIndex,++bIndex}}return aStr.length-bStr.length}(a,b)}))}class LexicalDistance{constructor(input){this._input=input,this._inputLowerCase=input.toLowerCase(),this._inputArray=stringToArray(this._inputLowerCase),this._rows=[new Array(input.length+1).fill(0),new Array(input.length+1).fill(0),new Array(input.length+1).fill(0)]}measure(option,threshold){if(this._input===option)return 0;const optionLowerCase=option.toLowerCase();if(this._inputLowerCase===optionLowerCase)return 1;let a=stringToArray(optionLowerCase),b=this._inputArray;if(a.length<b.length){const tmp=a;a=b,b=tmp}const aLength=a.length,bLength=b.length;if(aLength-bLength>threshold)return;const rows=this._rows;for(let j=0;j<=bLength;j++)rows[0][j]=j;for(let i=1;i<=aLength;i++){const upRow=rows[(i-1)%3],currentRow=rows[i%3];let smallestCell=currentRow[0]=i;for(let j=1;j<=bLength;j++){const cost=a[i-1]===b[j-1]?0:1;let currentCell=Math.min(upRow[j]+1,currentRow[j-1]+1,upRow[j-1]+cost);if(i>1&&j>1&&a[i-1]===b[j-2]&&a[i-2]===b[j-1]){const doubleDiagonalCell=rows[(i-2)%3][j-2];currentCell=Math.min(currentCell,doubleDiagonalCell+1)}currentCell<smallestCell&&(smallestCell=currentCell),currentRow[j]=currentCell}if(smallestCell>threshold)return}const distance=rows[aLength%3][bLength];return distance<=threshold?distance:void 0}}function stringToArray(str){const strLength=str.length,array=new Array(strLength);for(let i=0;i<strLength;++i)array[i]=str.charCodeAt(i);return array}function toObjMap(obj){if(null==obj)return Object.create(null);if(null===Object.getPrototypeOf(obj))return obj;const map=Object.create(null);for(const[key,value]of Object.entries(obj))map[key]=value;return map}const escapedRegExp=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function escapedReplacer(str){return escapeSequences[str.charCodeAt(0)]}const escapeSequences=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"],BREAK=Object.freeze({});function getEnterLeaveForKind(visitor,kind){const kindVisitor=visitor[kind];return"object"==typeof kindVisitor?kindVisitor:"function"==typeof kindVisitor?{enter:kindVisitor,leave:void 0}:{enter:visitor.enter,leave:visitor.leave}}function print(ast){return function visit(root,visitor,visitorKeys=QueryDocumentKeys){const enterLeaveMap=new Map;for(const kind of Object.values(Kind))enterLeaveMap.set(kind,getEnterLeaveForKind(visitor,kind));let stack,key,parent,inArray=Array.isArray(root),keys=[root],index=-1,edits=[],node=root;const path=[],ancestors=[];do{index++;const isLeaving=index===keys.length,isEdited=isLeaving&&0!==edits.length;if(isLeaving){if(key=0===ancestors.length?void 0:path[path.length-1],node=parent,parent=ancestors.pop(),isEdited)if(inArray){node=node.slice();let editOffset=0;for(const[editKey,editValue]of edits){const arrayKey=editKey-editOffset;null===editValue?(node.splice(arrayKey,1),editOffset++):node[arrayKey]=editValue}}else{node=Object.defineProperties({},Object.getOwnPropertyDescriptors(node));for(const[editKey,editValue]of edits)node[editKey]=editValue}index=stack.index,keys=stack.keys,edits=stack.edits,inArray=stack.inArray,stack=stack.prev}else if(parent){if(key=inArray?index:keys[index],node=parent[key],null==node)continue;path.push(key)}let result;if(!Array.isArray(node)){var _enterLeaveMap$get,_enterLeaveMap$get2;isNode(node)||devAssert(!1,`Invalid AST Node: ${inspect(node)}.`);const visitFn=isLeaving?null===(_enterLeaveMap$get=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get?void 0:_enterLeaveMap$get.leave:null===(_enterLeaveMap$get2=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get2?void 0:_enterLeaveMap$get2.enter;if(result=null==visitFn?void 0:visitFn.call(visitor,node,key,parent,path,ancestors),result===BREAK)break;if(!1===result){if(!isLeaving){path.pop();continue}}else if(void 0!==result&&(edits.push([key,result]),!isLeaving)){if(!isNode(result)){path.pop();continue}node=result}}var _node$kind;void 0===result&&isEdited&&edits.push([key,node]),isLeaving?path.pop():(stack={inArray,index,keys,edits,prev:stack},inArray=Array.isArray(node),keys=inArray?node:null!==(_node$kind=visitorKeys[node.kind])&&void 0!==_node$kind?_node$kind:[],index=-1,edits=[],parent&&ancestors.push(parent),parent=node)}while(void 0!==stack);return 0!==edits.length?edits[edits.length-1][1]:root}(ast,printDocASTReducer)}const printDocASTReducer={Name:{leave:node=>node.value},Variable:{leave:node=>"$"+node.name},Document:{leave:node=>join(node.definitions,"\n\n")},OperationDefinition:{leave(node){const varDefs=wrap("(",join(node.variableDefinitions,", "),")"),prefix=join([node.operation,join([node.name,varDefs]),join(node.directives," ")]," ");return("query"===prefix?"":prefix+" ")+node.selectionSet}},VariableDefinition:{leave:({variable,type,defaultValue,directives})=>variable+": "+type+wrap(" = ",defaultValue)+wrap(" ",join(directives," "))},SelectionSet:{leave:({selections})=>block(selections)},Field:{leave({alias,name,arguments:args,directives,selectionSet}){const prefix=wrap("",alias,": ")+name;let argsLine=prefix+wrap("(",join(args,", "),")");return argsLine.length>80&&(argsLine=prefix+wrap("(\n",indent(join(args,"\n")),"\n)")),join([argsLine,join(directives," "),selectionSet]," ")}},Argument:{leave:({name,value})=>name+": "+value},FragmentSpread:{leave:({name,directives})=>"..."+name+wrap(" ",join(directives," "))},InlineFragment:{leave:({typeCondition,directives,selectionSet})=>join(["...",wrap("on ",typeCondition),join(directives," "),selectionSet]," ")},FragmentDefinition:{leave:({name,typeCondition,variableDefinitions,directives,selectionSet})=>`fragment ${name}${wrap("(",join(variableDefinitions,", "),")")} on ${typeCondition} ${wrap("",join(directives," ")," ")}`+selectionSet},IntValue:{leave:({value})=>value},FloatValue:{leave:({value})=>value},StringValue:{leave:({value,block:isBlockString})=>isBlockString?function printBlockString(value,options){const escapedValue=value.replace(/"""/g,'\\"""'),lines=escapedValue.split(/\r\n|[\n\r]/g),isSingleLine=1===lines.length,forceLeadingNewLine=lines.length>1&&lines.slice(1).every((line=>0===line.length||isWhiteSpace(line.charCodeAt(0)))),hasTrailingTripleQuotes=escapedValue.endsWith('\\"""'),hasTrailingQuote=value.endsWith('"')&&!hasTrailingTripleQuotes,hasTrailingSlash=value.endsWith("\\"),forceTrailingNewline=hasTrailingQuote||hasTrailingSlash,printAsMultipleLines=!isSingleLine||value.length>70||forceTrailingNewline||forceLeadingNewLine||hasTrailingTripleQuotes;let result="";const skipLeadingNewLine=isSingleLine&&isWhiteSpace(value.charCodeAt(0));return(printAsMultipleLines&&!skipLeadingNewLine||forceLeadingNewLine)&&(result+="\n"),result+=escapedValue,(printAsMultipleLines||forceTrailingNewline)&&(result+="\n"),'"""'+result+'"""'}(value):function printString$1(str){return`"${str.replace(escapedRegExp,escapedReplacer)}"`}(value)},BooleanValue:{leave:({value})=>value?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value})=>value},ListValue:{leave:({values})=>"["+join(values,", ")+"]"},ObjectValue:{leave:({fields})=>"{"+join(fields,", ")+"}"},ObjectField:{leave:({name,value})=>name+": "+value},Directive:{leave:({name,arguments:args})=>"@"+name+wrap("(",join(args,", "),")")},NamedType:{leave:({name})=>name},ListType:{leave:({type})=>"["+type+"]"},NonNullType:{leave:({type})=>type+"!"},SchemaDefinition:{leave:({description,directives,operationTypes})=>wrap("",description,"\n")+join(["schema",join(directives," "),block(operationTypes)]," ")},OperationTypeDefinition:{leave:({operation,type})=>operation+": "+type},ScalarTypeDefinition:{leave:({description,name,directives})=>wrap("",description,"\n")+join(["scalar",name,join(directives," ")]," ")},ObjectTypeDefinition:{leave:({description,name,interfaces,directives,fields})=>wrap("",description,"\n")+join(["type",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},FieldDefinition:{leave:({description,name,arguments:args,type,directives})=>wrap("",description,"\n")+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+": "+type+wrap(" ",join(directives," "))},InputValueDefinition:{leave:({description,name,type,defaultValue,directives})=>wrap("",description,"\n")+join([name+": "+type,wrap("= ",defaultValue),join(directives," ")]," ")},InterfaceTypeDefinition:{leave:({description,name,interfaces,directives,fields})=>wrap("",description,"\n")+join(["interface",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},UnionTypeDefinition:{leave:({description,name,directives,types})=>wrap("",description,"\n")+join(["union",name,join(directives," "),wrap("= ",join(types," | "))]," ")},EnumTypeDefinition:{leave:({description,name,directives,values})=>wrap("",description,"\n")+join(["enum",name,join(directives," "),block(values)]," ")},EnumValueDefinition:{leave:({description,name,directives})=>wrap("",description,"\n")+join([name,join(directives," ")]," ")},InputObjectTypeDefinition:{leave:({description,name,directives,fields})=>wrap("",description,"\n")+join(["input",name,join(directives," "),block(fields)]," ")},DirectiveDefinition:{leave:({description,name,arguments:args,repeatable,locations})=>wrap("",description,"\n")+"directive @"+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+(repeatable?" repeatable":"")+" on "+join(locations," | ")},SchemaExtension:{leave:({directives,operationTypes})=>join(["extend schema",join(directives," "),block(operationTypes)]," ")},ScalarTypeExtension:{leave:({name,directives})=>join(["extend scalar",name,join(directives," ")]," ")},ObjectTypeExtension:{leave:({name,interfaces,directives,fields})=>join(["extend type",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},InterfaceTypeExtension:{leave:({name,interfaces,directives,fields})=>join(["extend interface",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},UnionTypeExtension:{leave:({name,directives,types})=>join(["extend union",name,join(directives," "),wrap("= ",join(types," | "))]," ")},EnumTypeExtension:{leave:({name,directives,values})=>join(["extend enum",name,join(directives," "),block(values)]," ")},InputObjectTypeExtension:{leave:({name,directives,fields})=>join(["extend input",name,join(directives," "),block(fields)]," ")}};function join(maybeArray,separator=""){var _maybeArray$filter$jo;return null!==(_maybeArray$filter$jo=null==maybeArray?void 0:maybeArray.filter((x=>x)).join(separator))&&void 0!==_maybeArray$filter$jo?_maybeArray$filter$jo:""}function block(array){return wrap("{\n",indent(join(array,"\n")),"\n}")}function wrap(start,maybeString,end=""){return null!=maybeString&&""!==maybeString?start+maybeString+end:""}function indent(str){return wrap("  ",str.replace(/\n/g,"\n  "))}function hasMultilineItems(maybeArray){var _maybeArray$some;return null!==(_maybeArray$some=null==maybeArray?void 0:maybeArray.some((str=>str.includes("\n"))))&&void 0!==_maybeArray$some&&_maybeArray$some}function valueFromASTUntyped(valueNode,variables){switch(valueNode.kind){case Kind.NULL:return null;case Kind.INT:return parseInt(valueNode.value,10);case Kind.FLOAT:return parseFloat(valueNode.value);case Kind.STRING:case Kind.ENUM:case Kind.BOOLEAN:return valueNode.value;case Kind.LIST:return valueNode.values.map((node=>valueFromASTUntyped(node,variables)));case Kind.OBJECT:return keyValMap(valueNode.fields,(field=>field.name.value),(field=>valueFromASTUntyped(field.value,variables)));case Kind.VARIABLE:return null==variables?void 0:variables[valueNode.name.value]}}function assertName(name){if(null!=name||devAssert(!1,"Must provide name."),"string"==typeof name||devAssert(!1,"Expected name to be a string."),0===name.length)throw new GraphQLError("Expected name to be a non-empty string.");for(let i=1;i<name.length;++i)if(!isLetter(code=name.charCodeAt(i))&&!function isDigit$1(code){return code>=48&&code<=57}(code)&&95!==code)throw new GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${name}" does not.`);var code;if(!function isNameStart(code){return isLetter(code)||95===code}(name.charCodeAt(0)))throw new GraphQLError(`Names must start with [_a-zA-Z] but "${name}" does not.`);return name}function assertEnumValueName(name){if("true"===name||"false"===name||"null"===name)throw new GraphQLError(`Enum values cannot be named: ${name}`);return assertName(name)}function isType(type){return function isScalarType$1(type){return instanceOf(type,GraphQLScalarType)}(type)||function isObjectType(type){return instanceOf(type,GraphQLObjectType)}(type)||function isInterfaceType(type){return instanceOf(type,GraphQLInterfaceType)}(type)||function isUnionType(type){return instanceOf(type,GraphQLUnionType)}(type)||function isEnumType(type){return instanceOf(type,GraphQLEnumType)}(type)||function isInputObjectType(type){return instanceOf(type,GraphQLInputObjectType)}(type)||function isListType$1(type){return instanceOf(type,GraphQLList)}(type)||isNonNullType$1(type)}function isNonNullType$1(type){return instanceOf(type,GraphQLNonNull)}class GraphQLList{constructor(ofType){isType(ofType)||devAssert(!1,`Expected ${inspect(ofType)} to be a GraphQL type.`),this.ofType=ofType}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class GraphQLNonNull{constructor(ofType){(function isNullableType(type){return isType(type)&&!isNonNullType$1(type)})(ofType)||devAssert(!1,`Expected ${inspect(ofType)} to be a GraphQL nullable type.`),this.ofType=ofType}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function resolveReadonlyArrayThunk(thunk){return"function"==typeof thunk?thunk():thunk}function resolveObjMapThunk(thunk){return"function"==typeof thunk?thunk():thunk}class GraphQLScalarType{constructor(config){var _config$parseValue,_config$serialize,_config$parseLiteral,_config$extensionASTN;const parseValue=null!==(_config$parseValue=config.parseValue)&&void 0!==_config$parseValue?_config$parseValue:identityFunc;this.name=assertName(config.name),this.description=config.description,this.specifiedByURL=config.specifiedByURL,this.serialize=null!==(_config$serialize=config.serialize)&&void 0!==_config$serialize?_config$serialize:identityFunc,this.parseValue=parseValue,this.parseLiteral=null!==(_config$parseLiteral=config.parseLiteral)&&void 0!==_config$parseLiteral?_config$parseLiteral:(node,variables)=>parseValue(valueFromASTUntyped(node,variables)),this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN=config.extensionASTNodes)&&void 0!==_config$extensionASTN?_config$extensionASTN:[],null==config.specifiedByURL||"string"==typeof config.specifiedByURL||devAssert(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${inspect(config.specifiedByURL)}.`),null==config.serialize||"function"==typeof config.serialize||devAssert(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),config.parseLiteral&&("function"==typeof config.parseValue&&"function"==typeof config.parseLiteral||devAssert(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class GraphQLObjectType{constructor(config){var _config$extensionASTN2;this.name=assertName(config.name),this.description=config.description,this.isTypeOf=config.isTypeOf,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN2=config.extensionASTNodes)&&void 0!==_config$extensionASTN2?_config$extensionASTN2:[],this._fields=()=>defineFieldMap(config),this._interfaces=()=>defineInterfaces(config),null==config.isTypeOf||"function"==typeof config.isTypeOf||devAssert(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${inspect(config.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function defineInterfaces(config){var _config$interfaces;const interfaces=resolveReadonlyArrayThunk(null!==(_config$interfaces=config.interfaces)&&void 0!==_config$interfaces?_config$interfaces:[]);return Array.isArray(interfaces)||devAssert(!1,`${config.name} interfaces must be an Array or a function which returns an Array.`),interfaces}function defineFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);return isPlainObj(fieldMap)||devAssert(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(fieldMap,((fieldConfig,fieldName)=>{var _fieldConfig$args;isPlainObj(fieldConfig)||devAssert(!1,`${config.name}.${fieldName} field config must be an object.`),null==fieldConfig.resolve||"function"==typeof fieldConfig.resolve||devAssert(!1,`${config.name}.${fieldName} field resolver must be a function if provided, but got: ${inspect(fieldConfig.resolve)}.`);const argsConfig=null!==(_fieldConfig$args=fieldConfig.args)&&void 0!==_fieldConfig$args?_fieldConfig$args:{};return isPlainObj(argsConfig)||devAssert(!1,`${config.name}.${fieldName} args must be an object with argument names as keys.`),{name:assertName(fieldName),description:fieldConfig.description,type:fieldConfig.type,args:defineArguments(argsConfig),resolve:fieldConfig.resolve,subscribe:fieldConfig.subscribe,deprecationReason:fieldConfig.deprecationReason,extensions:toObjMap(fieldConfig.extensions),astNode:fieldConfig.astNode}}))}function defineArguments(config){return Object.entries(config).map((([argName,argConfig])=>({name:assertName(argName),description:argConfig.description,type:argConfig.type,defaultValue:argConfig.defaultValue,deprecationReason:argConfig.deprecationReason,extensions:toObjMap(argConfig.extensions),astNode:argConfig.astNode})))}function isPlainObj(obj){return isObjectLike(obj)&&!Array.isArray(obj)}function fieldsToFieldsConfig(fields){return mapValue(fields,(field=>({description:field.description,type:field.type,args:argsToArgsConfig(field.args),resolve:field.resolve,subscribe:field.subscribe,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode})))}function argsToArgsConfig(args){return keyValMap(args,(arg=>arg.name),(arg=>({description:arg.description,type:arg.type,defaultValue:arg.defaultValue,deprecationReason:arg.deprecationReason,extensions:arg.extensions,astNode:arg.astNode})))}class GraphQLInterfaceType{constructor(config){var _config$extensionASTN3;this.name=assertName(config.name),this.description=config.description,this.resolveType=config.resolveType,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN3=config.extensionASTNodes)&&void 0!==_config$extensionASTN3?_config$extensionASTN3:[],this._fields=defineFieldMap.bind(void 0,config),this._interfaces=defineInterfaces.bind(void 0,config),null==config.resolveType||"function"==typeof config.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class GraphQLUnionType{constructor(config){var _config$extensionASTN4;this.name=assertName(config.name),this.description=config.description,this.resolveType=config.resolveType,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN4=config.extensionASTNodes)&&void 0!==_config$extensionASTN4?_config$extensionASTN4:[],this._types=defineTypes.bind(void 0,config),null==config.resolveType||"function"==typeof config.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function defineTypes(config){const types=resolveReadonlyArrayThunk(config.types);return Array.isArray(types)||devAssert(!1,`Must provide Array of types or a function which returns such an array for Union ${config.name}.`),types}class GraphQLEnumType{constructor(config){var _config$extensionASTN5;this.name=assertName(config.name),this.description=config.description,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN5=config.extensionASTNodes)&&void 0!==_config$extensionASTN5?_config$extensionASTN5:[],this._values="function"==typeof config.values?config.values:defineEnumValues(this.name,config.values),this._valueLookup=null,this._nameLookup=null}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return"function"==typeof this._values&&(this._values=defineEnumValues(this.name,this._values())),this._values}getValue(name){return null===this._nameLookup&&(this._nameLookup=function keyMap(list,keyFn){const result=Object.create(null);for(const item of list)result[keyFn(item)]=item;return result}(this.getValues(),(value=>value.name))),this._nameLookup[name]}serialize(outputValue){null===this._valueLookup&&(this._valueLookup=new Map(this.getValues().map((enumValue2=>[enumValue2.value,enumValue2]))));const enumValue=this._valueLookup.get(outputValue);if(void 0===enumValue)throw new GraphQLError(`Enum "${this.name}" cannot represent value: ${inspect(outputValue)}`);return enumValue.name}parseValue(inputValue){if("string"!=typeof inputValue){const valueStr=inspect(inputValue);throw new GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${valueStr}.`+didYouMeanEnumValue(this,valueStr))}const enumValue=this.getValue(inputValue);if(null==enumValue)throw new GraphQLError(`Value "${inputValue}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,inputValue));return enumValue.value}parseLiteral(valueNode,_variables){if(valueNode.kind!==Kind.ENUM){const valueStr=print(valueNode);throw new GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${valueStr}.`+didYouMeanEnumValue(this,valueStr),{nodes:valueNode})}const enumValue=this.getValue(valueNode.value);if(null==enumValue){const valueStr=print(valueNode);throw new GraphQLError(`Value "${valueStr}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,valueStr),{nodes:valueNode})}return enumValue.value}toConfig(){const values=keyValMap(this.getValues(),(value=>value.name),(value=>({description:value.description,value:value.value,deprecationReason:value.deprecationReason,extensions:value.extensions,astNode:value.astNode})));return{name:this.name,description:this.description,values,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function didYouMeanEnumValue(enumType,unknownValueStr){return function didYouMean(firstArg,secondArg){const[subMessage,suggestionsArg]=secondArg?[firstArg,secondArg]:[void 0,firstArg];let message=" Did you mean ";subMessage&&(message+=subMessage+" ");const suggestions=suggestionsArg.map((x=>`"${x}"`));switch(suggestions.length){case 0:return"";case 1:return message+suggestions[0]+"?";case 2:return message+suggestions[0]+" or "+suggestions[1]+"?"}const selected=suggestions.slice(0,MAX_SUGGESTIONS),lastItem=selected.pop();return message+selected.join(", ")+", or "+lastItem+"?"}("the enum value",suggestionList(unknownValueStr,enumType.getValues().map((value=>value.name))))}function defineEnumValues(typeName2,valueMap){return isPlainObj(valueMap)||devAssert(!1,`${typeName2} values must be an object with value names as keys.`),Object.entries(valueMap).map((([valueName,valueConfig])=>(isPlainObj(valueConfig)||devAssert(!1,`${typeName2}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${inspect(valueConfig)}.`),{name:assertEnumValueName(valueName),description:valueConfig.description,value:void 0!==valueConfig.value?valueConfig.value:valueName,deprecationReason:valueConfig.deprecationReason,extensions:toObjMap(valueConfig.extensions),astNode:valueConfig.astNode})))}class GraphQLInputObjectType{constructor(config){var _config$extensionASTN6,_config$isOneOf;this.name=assertName(config.name),this.description=config.description,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN6=config.extensionASTNodes)&&void 0!==_config$extensionASTN6?_config$extensionASTN6:[],this.isOneOf=null!==(_config$isOneOf=config.isOneOf)&&void 0!==_config$isOneOf&&_config$isOneOf,this._fields=defineInputFieldMap.bind(void 0,config)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const fields=mapValue(this.getFields(),(field=>({description:field.description,type:field.type,defaultValue:field.defaultValue,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode})));return{name:this.name,description:this.description,fields,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,isOneOf:this.isOneOf}}toString(){return this.name}toJSON(){return this.toString()}}function defineInputFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);return isPlainObj(fieldMap)||devAssert(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(fieldMap,((fieldConfig,fieldName)=>(!("resolve"in fieldConfig)||devAssert(!1,`${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`),{name:assertName(fieldName),description:fieldConfig.description,type:fieldConfig.type,defaultValue:fieldConfig.defaultValue,deprecationReason:fieldConfig.deprecationReason,extensions:toObjMap(fieldConfig.extensions),astNode:fieldConfig.astNode})))}new GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue?1:0;let num=coercedValue;if("string"==typeof coercedValue&&""!==coercedValue&&(num=Number(coercedValue)),"number"!=typeof num||!Number.isInteger(num))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(coercedValue)}`);if(num>2147483647||num<-2147483648)throw new GraphQLError("Int cannot represent non 32-bit signed integer value: "+inspect(coercedValue));return num},parseValue(inputValue){if("number"!=typeof inputValue||!Number.isInteger(inputValue))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(inputValue)}`);if(inputValue>2147483647||inputValue<-2147483648)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.INT)throw new GraphQLError(`Int cannot represent non-integer value: ${print(valueNode)}`,{nodes:valueNode});const num=parseInt(valueNode.value,10);if(num>2147483647||num<-2147483648)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,{nodes:valueNode});return num}}),new GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue?1:0;let num=coercedValue;if("string"==typeof coercedValue&&""!==coercedValue&&(num=Number(coercedValue)),"number"!=typeof num||!Number.isFinite(num))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(coercedValue)}`);return num},parseValue(inputValue){if("number"!=typeof inputValue||!Number.isFinite(inputValue))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.FLOAT&&valueNode.kind!==Kind.INT)throw new GraphQLError(`Float cannot represent non numeric value: ${print(valueNode)}`,valueNode);return parseFloat(valueNode.value)}});const GraphQLString=new GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"==typeof coercedValue)return coercedValue;if("boolean"==typeof coercedValue)return coercedValue?"true":"false";if("number"==typeof coercedValue&&Number.isFinite(coercedValue))return coercedValue.toString();throw new GraphQLError(`String cannot represent value: ${inspect(outputValue)}`)},parseValue(inputValue){if("string"!=typeof inputValue)throw new GraphQLError(`String cannot represent a non string value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.STRING)throw new GraphQLError(`String cannot represent a non string value: ${print(valueNode)}`,{nodes:valueNode});return valueNode.value}}),GraphQLBoolean=new GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue;if(Number.isFinite(coercedValue))return 0!==coercedValue;throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`)},parseValue(inputValue){if("boolean"!=typeof inputValue)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.BOOLEAN)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${print(valueNode)}`,{nodes:valueNode});return valueNode.value}});function serializeObject(outputValue){if(isObjectLike(outputValue)){if("function"==typeof outputValue.valueOf){const valueOfResult=outputValue.valueOf();if(!isObjectLike(valueOfResult))return valueOfResult}if("function"==typeof outputValue.toJSON)return outputValue.toJSON()}return outputValue}new GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"==typeof coercedValue)return coercedValue;if(Number.isInteger(coercedValue))return String(coercedValue);throw new GraphQLError(`ID cannot represent value: ${inspect(outputValue)}`)},parseValue(inputValue){if("string"==typeof inputValue)return inputValue;if("number"==typeof inputValue&&Number.isInteger(inputValue))return inputValue.toString();throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`)},parseLiteral(valueNode){if(valueNode.kind!==Kind.STRING&&valueNode.kind!==Kind.INT)throw new GraphQLError("ID cannot represent a non-string and non-integer value: "+print(valueNode),{nodes:valueNode});return valueNode.value}});class GraphQLDirective{constructor(config){var _config$isRepeatable,_config$args;this.name=assertName(config.name),this.description=config.description,this.locations=config.locations,this.isRepeatable=null!==(_config$isRepeatable=config.isRepeatable)&&void 0!==_config$isRepeatable&&_config$isRepeatable,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,Array.isArray(config.locations)||devAssert(!1,`@${config.name} locations must be an Array.`);const args=null!==(_config$args=config.args)&&void 0!==_config$args?_config$args:{};isObjectLike(args)&&!Array.isArray(args)||devAssert(!1,`@${config.name} args must be an object with argument names as keys.`),this.args=defineArguments(args)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:argsToArgsConfig(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}new GraphQLDirective({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[DirectiveLocation.FIELD,DirectiveLocation.FRAGMENT_SPREAD,DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new GraphQLNonNull(GraphQLBoolean),description:"Included when true."}}}),new GraphQLDirective({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[DirectiveLocation.FIELD,DirectiveLocation.FRAGMENT_SPREAD,DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new GraphQLNonNull(GraphQLBoolean),description:"Skipped when true."}}});new GraphQLDirective({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[DirectiveLocation.FIELD_DEFINITION,DirectiveLocation.ARGUMENT_DEFINITION,DirectiveLocation.INPUT_FIELD_DEFINITION,DirectiveLocation.ENUM_VALUE],args:{reason:{type:GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:"No longer supported"}}}),new GraphQLDirective({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[DirectiveLocation.SCALAR],args:{url:{type:new GraphQLNonNull(GraphQLString),description:"The URL that specifies the behavior of this scalar."}}}),new GraphQLDirective({name:"oneOf",description:"Indicates exactly one field must be supplied and this field must not be `null`.",locations:[DirectiveLocation.INPUT_OBJECT],args:{}});const GRAPH_API_DIRECTIVE_LOCATIONS=[DirectiveLocation.QUERY,DirectiveLocation.MUTATION,DirectiveLocation.SUBSCRIPTION,DirectiveLocation.FIELD,DirectiveLocation.FRAGMENT_DEFINITION,DirectiveLocation.FRAGMENT_SPREAD,DirectiveLocation.INLINE_FRAGMENT,DirectiveLocation.VARIABLE_DEFINITION,DirectiveLocation.SCHEMA,DirectiveLocation.SCALAR,DirectiveLocation.OBJECT,DirectiveLocation.FIELD_DEFINITION,DirectiveLocation.ARGUMENT_DEFINITION,DirectiveLocation.INTERFACE,DirectiveLocation.UNION,DirectiveLocation.ENUM,DirectiveLocation.ENUM_VALUE,DirectiveLocation.INPUT_OBJECT,DirectiveLocation.INPUT_FIELD_DEFINITION];function isObject(maybeObject){return!!maybeObject&&"object"==typeof maybeObject}function isGraphApiDirectiveDefinition(value){return!!isObject(value)&&("locations"in value&&Array.isArray(value.locations)&&value.locations.length>0&&value.locations.every(isGraphApiDirectiveLocation))}function isGraphApiDirectiveLocation(value){return"string"==typeof value&&GRAPH_API_DIRECTIVE_LOCATIONS.some((loc=>value===loc))}new Set(["include","skip","specifiedBy","deprecated","oneOf"]);const GRAPH_API_PROPERTY_ONE_OF="oneOf",GRAPH_API_PROPERTY_QUERIES="queries",GRAPH_API_PROPERTY_MUTATIONS="mutations",GRAPH_API_PROPERTY_SUBSCRIPTIONS="subscriptions",GRAPH_API_PROPERTY_SCALARS="scalars",GRAPH_API_PROPERTY_OBJECTS="objects",GRAPH_API_PROPERTY_INTERFACES="interfaces",GRAPH_API_PROPERTY_INPUT_OBJECTS="inputObjects",GRAPH_API_PROPERTY_DIRECTIVES="directives",GRAPH_API_PROPERTY_UNIONS="unions",GRAPH_API_PROPERTY_ENUMS="enums",GRAPH_API_PROPERTY_ARGS="args",GRAPH_API_PROPERTY_LOCATIONS="locations",GRAPH_API_PROPERTY_META="meta",GRAPH_API_PROPERTY_NULLABLE="nullable",GRAPH_API_PROPERTY_REPEATABLE="repeatable",GRAPH_API_PROPERTY_VALUES="values",GRAPH_API_PROPERTY_PROPERTIES="properties",GRAPH_API_PROPERTY_METHODS="methods",GRAPH_API_PROPERTY_COMPONENTS="components",GRAPH_API_DEPRECATION_PREDICATE=value=>{var _a;const deprecatedDirectiveProperty=getJsoProperty(value,"deprecated");if(deprecatedDirectiveProperty)return function isGraphApiDirective(value){return!!isObject(value)&&"definition"in value&&isGraphApiDirectiveDefinition(value.definition)}(deprecatedDirectiveProperty)?null==(_a=deprecatedDirectiveProperty.meta)?void 0:_a.reason:void 0},EMPTY_MARKER=Symbol("empty-items"),GRAPH_API_DEFAULTS={[GRAPH_API_PROPERTY_COMPONENTS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_QUERIES]:EMPTY_MARKER,[GRAPH_API_PROPERTY_MUTATIONS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_SUBSCRIPTIONS]:EMPTY_MARKER},COMPONENTS_DEFAULTS={[GRAPH_API_PROPERTY_SCALARS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_OBJECTS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_INTERFACES]:EMPTY_MARKER,[GRAPH_API_PROPERTY_INPUT_OBJECTS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_DIRECTIVES]:EMPTY_MARKER,[GRAPH_API_PROPERTY_UNIONS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_ENUMS]:EMPTY_MARKER},METHOD_DEFAULTS={[GRAPH_API_PROPERTY_ARGS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_DIRECTIVES]:EMPTY_MARKER},DIRECTIVE_DEFINITION_DEFAULTS={[GRAPH_API_PROPERTY_ARGS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_LOCATIONS]:EMPTY_MARKER,[GRAPH_API_PROPERTY_REPEATABLE]:!1,[GRAPH_API_PROPERTY_DIRECTIVES]:EMPTY_MARKER},DIRECTIVE_USAGE_DEFAULTS={[GRAPH_API_PROPERTY_META]:EMPTY_MARKER},ENUM_VALUE_DEFAULTS={[GRAPH_API_PROPERTY_DIRECTIVES]:EMPTY_MARKER},TYPE_USAGE_DEFAULTS={[GRAPH_API_PROPERTY_NULLABLE]:!0,[GRAPH_API_PROPERTY_DIRECTIVES]:EMPTY_MARKER},ENUM_DEFINITION_DEFAULTS={[GRAPH_API_PROPERTY_VALUES]:EMPTY_MARKER},INPUT_OBJECT_DEFINITION_DEFAULTS={[GRAPH_API_PROPERTY_PROPERTIES]:EMPTY_MARKER},INTERFACE_DEFINITION_DEFAULTS={[GRAPH_API_PROPERTY_INTERFACES]:EMPTY_MARKER,[GRAPH_API_PROPERTY_METHODS]:EMPTY_MARKER},UNION_DEFINITION_DEFAULTS={[GRAPH_API_PROPERTY_ONE_OF]:EMPTY_MARKER},DIRECTIVE_HOLDER_DEFAULTS={[GRAPH_API_PROPERTY_DIRECTIVES]:EMPTY_MARKER},TO_EMPTY_ARRAY_MAPPING={mapping:new Map([[EMPTY_MARKER,{value:()=>[],reverseMatcher:deepEqualsMatcher([])}]])},TO_EMPTY_OBJECT_MAPPING={mapping:new Map([[EMPTY_MARKER,{value:()=>({}),reverseMatcher:deepEqualsMatcher({})}]])},GRAPH_API_REPLACES={[GRAPH_API_PROPERTY_COMPONENTS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_QUERIES]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_MUTATIONS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_SUBSCRIPTIONS]:TO_EMPTY_OBJECT_MAPPING},COMPONENTS_REPLACES={[GRAPH_API_PROPERTY_SCALARS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_OBJECTS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_INTERFACES]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_INPUT_OBJECTS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_DIRECTIVES]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_UNIONS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_ENUMS]:TO_EMPTY_OBJECT_MAPPING},METHOD_REPLACES={[GRAPH_API_PROPERTY_ARGS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_DIRECTIVES]:TO_EMPTY_OBJECT_MAPPING},DIRECTIVE_DEFINITION_REPLACES={[GRAPH_API_PROPERTY_ARGS]:TO_EMPTY_OBJECT_MAPPING,[GRAPH_API_PROPERTY_LOCATIONS]:TO_EMPTY_ARRAY_MAPPING,[GRAPH_API_PROPERTY_DIRECTIVES]:TO_EMPTY_OBJECT_MAPPING},DIRECTIVE_USAGE_REPLACES={[GRAPH_API_PROPERTY_META]:TO_EMPTY_OBJECT_MAPPING},ENUM_VALUE_REPLACES={[GRAPH_API_PROPERTY_DIRECTIVES]:TO_EMPTY_OBJECT_MAPPING},TYPE_USAGE_REPLACES={[GRAPH_API_PROPERTY_DIRECTIVES]:TO_EMPTY_OBJECT_MAPPING},ENUM_DEFINITION_REPLACES={[GRAPH_API_PROPERTY_VALUES]:TO_EMPTY_OBJECT_MAPPING},INPUT_OBJECT_DEFINITION_REPLACES={[GRAPH_API_PROPERTY_PROPERTIES]:TO_EMPTY_OBJECT_MAPPING},INTERFACE_DEFINITION_REPLACES={[GRAPH_API_PROPERTY_INTERFACES]:TO_EMPTY_ARRAY_MAPPING,[GRAPH_API_PROPERTY_METHODS]:TO_EMPTY_OBJECT_MAPPING},UNION_DEFINITION_REPLACES={[GRAPH_API_PROPERTY_ONE_OF]:TO_EMPTY_ARRAY_MAPPING},DIRECTIVE_HOLDER_REPLACES={[GRAPH_API_PROPERTY_DIRECTIVES]:TO_EMPTY_OBJECT_MAPPING},directivesUsagesRules={"/directives":{deprecation:{deprecationResolver:ctx=>GRAPH_API_DEPRECATION_PREDICATE(ctx),descriptionCalculator:()=>"[Deprecated]"},"/*":{"/definition":()=>directiveDefinitionRules,"/meta":{"/*":{validate:checkType(...TYPE_JSON_ANY)},validate:checkType("object")},unify:[valueDefaults(DIRECTIVE_USAGE_DEFAULTS),valueReplaces(DIRECTIVE_USAGE_REPLACES),(value,{options})=>{if(!qubershipApihubJsonCrawl.isObject(value))return value;const directive=value,{meta,definition}=directive;if(!meta||!isGraphApiDirectiveDefinition(definition))return value;const args=definition.args;if(!qubershipApihubJsonCrawl.isObject(args))return value;const defaults=Object.entries(args).reduce(((collector,[key,value2])=>qubershipApihubJsonCrawl.isObject(value2)&&"default"in value2?(collector[key]=value2.default,copyOrigins(value2,collector,"default",key,options.originsFlag),collector):collector),{});if(0===defaults.length)return value;const newMeta={...defaults,...meta};if(options.originsFlag){const defaultsMeta=resolveOriginsMetaRecord(defaults,options.originsFlag)??{},existingMeta=resolveOriginsMetaRecord(newMeta,options.originsFlag)??{};setJsoProperty(newMeta,options.originsFlag,{...defaultsMeta,...existingMeta})}if(options.defaultsFlag){const defaultsMap=Object.entries(defaults).reduce(((col,[key,value2])=>(value2!==newMeta[key]||(col[key]=value2===meta[key]?"pure":"synthetic"),col)),{});setJsoProperty(newMeta,options.defaultsFlag,defaultsMap)}return{...value,meta:newMeta}}]},validate:checkType("object")},unify:[valueDefaults(DIRECTIVE_HOLDER_DEFAULTS),valueReplaces(DIRECTIVE_HOLDER_REPLACES)]},baseRules={"/description":{validate:checkType("string")},...directivesUsagesRules},selfNamedBaseRules={...baseRules,"/title":{validate:checkType("string")}},directiveDefinitionRules={...selfNamedBaseRules,"/args":{"/*":()=>typeUsageRules,validate:checkType("object")},"/repeatable":{validate:checkType("boolean")},"/locations":{"/*":{validate:[checkType("string"),checkContains(...GRAPH_API_DIRECTIVE_LOCATIONS)]},validate:checkType("array")},validate:checkType("object"),unify:[valueDefaults(DIRECTIVE_DEFINITION_DEFAULTS),valueReplaces(DIRECTIVE_DEFINITION_REPLACES)]},typeDefinitionRules=({value})=>{switch(resolveValueByPath(value,["type","kind"])){case"ID":case"string":case"integer":case"float":case"boolean":case"scalar":return scalarDefinitionRules;case"object":case"interface":return interfaceDefinitionRules;case"enum":return enumDefinitionRules;case"input":return inputObjectDefinitionRules;case"union":return unionDefinitionRules;case"list":return listDefinitionRules;default:return{validate:()=>!1}}},typeUsageRules={...baseRules,"/default":{"/**":{validate:checkType(...TYPE_JSON_ANY)},validate:checkType(...TYPE_JSON_ANY)},"/nullable":{validate:checkType("boolean")},"/typeDef":typeDefinitionRules,unify:[valueDefaults(TYPE_USAGE_DEFAULTS),valueReplaces(TYPE_USAGE_REPLACES)]},methodRules={...baseRules,"/args":{"/*":typeUsageRules,validate:checkType("object")},"/output":()=>typeUsageRules,unify:[valueDefaults(METHOD_DEFAULTS),valueReplaces(METHOD_REPLACES)]},scalarDefinitionRules={...selfNamedBaseRules,"/type":{"/kind":{validate:[checkType("string"),checkContains("ID","string","integer","float","boolean","scalar")]},validate:checkType("object"),unify:[valueDefaults({}),valueReplaces({})]}},enumDefinitionRules={...selfNamedBaseRules,"/type":{"/kind":{validate:[checkType("string"),checkContains("enum")]},"/values":{"/*":{...baseRules,unify:[valueDefaults(ENUM_VALUE_DEFAULTS),valueReplaces(ENUM_VALUE_REPLACES)],validate:checkType("object")},validate:checkType("object")},validate:checkType("object"),unify:[valueDefaults(ENUM_DEFINITION_DEFAULTS),valueReplaces(ENUM_DEFINITION_REPLACES)]}},inputObjectDefinitionRules={...selfNamedBaseRules,"/type":{"/kind":{validate:[checkType("string"),checkContains("input")]},"/properties":{"/*":typeUsageRules,validate:checkType("object")},validate:checkType("object"),unify:[valueDefaults(INPUT_OBJECT_DEFINITION_DEFAULTS),valueReplaces(INPUT_OBJECT_DEFINITION_REPLACES)]}},interfaceDefinitionRules={...selfNamedBaseRules,"/type":{"/kind":{validate:[checkType("string"),checkContains("interface","object")]},"/methods":{"/*":methodRules,validate:checkType("object")},"/interfaces":{"/*":()=>interfaceDefinitionRules,validate:checkType("array")},validate:checkType("object"),unify:[valueDefaults(INTERFACE_DEFINITION_DEFAULTS),valueReplaces(INTERFACE_DEFINITION_REPLACES)]}},unionDefinitionRules={...selfNamedBaseRules,"/type":{"/kind":{validate:[checkType("string"),checkContains("union")]},"/oneOf":{"/*":typeDefinitionRules,validate:checkType("array")},validate:checkType("object"),unify:[valueDefaults(UNION_DEFINITION_DEFAULTS),valueReplaces(UNION_DEFINITION_REPLACES)]}},listDefinitionRules={...selfNamedBaseRules,"/type":{"/kind":{validate:[checkType("string"),checkContains("list")]},"/items":typeUsageRules,validate:checkType("object"),unify:[valueDefaults({}),valueReplaces({})]}},RULES={[SPEC_TYPE_JSON_SCHEMA_04]:jsonSchemaRules("json-schema-04"),[SPEC_TYPE_JSON_SCHEMA_06]:jsonSchemaRules("json-schema-06"),[SPEC_TYPE_JSON_SCHEMA_07]:jsonSchemaRules(SPEC_TYPE_JSON_SCHEMA_07),[SPEC_TYPE_OPEN_API_30]:openApiRules(SPEC_TYPE_OPEN_API_30),[SPEC_TYPE_OPEN_API_31]:openApiRules(SPEC_TYPE_OPEN_API_31),[SPEC_TYPE_GRAPH_API]:{"/graphapi":{validate:checkType("string")},"/queries":{"/*":methodRules,validate:checkType("object")},"/mutations":{"/*":methodRules,validate:checkType("object")},"/subscriptions":{"/*":methodRules,validate:checkType("object")},"/components":{"/scalars":{"/*":scalarDefinitionRules,validate:checkType("object")},"/objects":{"/*":interfaceDefinitionRules,validate:checkType("object")},"/interfaces":{"/*":interfaceDefinitionRules,validate:checkType("object")},"/inputObjects":{"/*":inputObjectDefinitionRules,validate:checkType("object")},"/directives":{"/*":directiveDefinitionRules,validate:checkType("object")},"/unions":{"/*":unionDefinitionRules,validate:checkType("object")},"/enums":{"/*":enumDefinitionRules,validate:checkType("object")},validate:checkType("object"),unify:[valueDefaults(COMPONENTS_DEFAULTS),valueReplaces(COMPONENTS_REPLACES)]},unify:[valueDefaults(GRAPH_API_DEFAULTS),valueReplaces(GRAPH_API_REPLACES)]},[SPEC_TYPE_ASYNCAPI_2]:{}};const IMPOSSIBLE_ORIGIN_PARENT={parent:void 0,value:"ERROR!!!"},defineOriginsAndResolveRef=(value,options)=>{const spec=resolveSpec(value),internalOptions={resolveRef:true,originsAlreadyDefined:!!(null==options?void 0:options.originsFlag),...options,originsFlag:(null==options?void 0:options.originsAlreadyDefined)||null==options?void 0:options.originsFlag,source:(null==options?void 0:options.source)??value,richRefAllowed:spec.type===SPEC_TYPE_OPEN_API_31||spec.type===SPEC_TYPE_GRAPH_API,ignoreSymbols:new Set([...(null==options?void 0:options.originsFlag)?[options.originsFlag]:[],...(null==options?void 0:options.inlineRefsFlag)?[options.inlineRefsFlag]:[],...(null==options?void 0:options.syntheticTitleFlag)?[options.syntheticTitleFlag]:[],...(null==options?void 0:options.syntheticAllOfFlag)?[options.syntheticAllOfFlag]:[],...(null==options?void 0:options.ignoreSymbols)?options.ignoreSymbols:[]])},cycledJsoHandlerHook=createCycledJsoHandlerHook(),originCache=new Map,resolvedJso=qubershipApihubJsonCrawl.syncClone(value,[cycledJsoHandlerHook,createDefineOriginsAndResolveRefHook(value,internalOptions,cycledJsoHandlerHook),cycledJsoHandlerHook],{rules:RULES[spec.type],state:{ignoreTreeUnderSymbols:!1,originParent:void 0,originCollector:{},lazySourceOriginCollector:new Map,syntheticsJumps:new Map,originCache}});if(null==options?void 0:options.originsFlag){const origins=[...originCache.values()];qubershipApihubJsonCrawl.isObject(resolvedJso)&&options.originsFlag in resolvedJso&&origins.push(...[...Object.values(resolvedJso[options.originsFlag])].flatMap((v=>v))),function cleanupRootOrigin(origins){origins.forEach((origin=>{origin.parent&&origin.parent.value===qubershipApihubJsonCrawl.JSON_ROOT_KEY&&(origin.parent=void 0)}))}(origins)}return resolvedJso},createDefineOriginsAndResolveRefHook=(rootJso,options,cycleJsoHook)=>{const cyclingGuard=new Set,syntheticTitleCache=new Map,defineOriginsAndResolveRefHook=({key,value,state,path,rules})=>{var _a,_b,_c;if(state.ignoreTreeUnderSymbols)return{value};const safeKey=key??qubershipApihubJsonCrawl.JSON_ROOT_KEY;if("symbol"==typeof safeKey&&options.ignoreSymbols.has(safeKey))return{value,state:{...state,ignoreTreeUnderSymbols:!0,originParent:IMPOSSIBLE_ORIGIN_PARENT}};if(!qubershipApihubJsonCrawl.isObject(value))return options.originsFlag&&(state.originCollector[safeKey]=state.originCollector[safeKey]??[{parent:state.originParent,value:safeKey}]),{value,state:{...state,originParent:IMPOSSIBLE_ORIGIN_PARENT}};const originForObj=options.originsFlag?getOrSimpleCreateOrigin(value,state.originParent,safeKey,state.originCache):IMPOSSIBLE_ORIGIN_PARENT;if(options.resolveRef){const{$ref,...otherSibling}=value;let sibling=otherSibling;if($ref){const originForRef=getOrReuseOrigin(originForObj,{parent:originForObj,value:JSON_SCHEMA_PROPERTY_REF},state.originCache);if("string"!=typeof $ref){null==(_a=options.onRefResolveError)||_a.call(options,ErrorMessage_refNotValidFormat($ref),path,$ref,RefErrorTypes.REF_NOT_VALID_FORMAT);const brokenValueClone={[JSON_SCHEMA_PROPERTY_REF]:$ref};return state.node[safeKey]=brokenValueClone,setOrigins(state.node,safeKey,options.originsFlag,[originForObj]),setOrigins(brokenValueClone,JSON_SCHEMA_PROPERTY_REF,options.originsFlag,[originForRef]),{done:!0}}options.richRefAllowed||0===Reflect.ownKeys(sibling).length||(null==(_b=options.onRefResolveError)||_b.call(options,ErrorMessage_richRefObjectNotAllowed($ref),path,$ref,RefErrorTypes.RICH_REF_NOT_ALLOWED),sibling={});const reference=parseRef($ref),wrapRefWithAllOfIfNeed=(refJso,sibling2,refOrigin)=>{const wrap2={[JSON_SCHEMA_PROPERTY_ALL_OF]:[]};options.originsFlag&&getOrReuseOrigin(wrap2,originForObj,state.originCache),options.originsFlag&&getOrReuseOrigin(wrap2.allOf,originForObj,state.originCache),options.syntheticAllOfFlag&&setJsoProperty(wrap2,options.syntheticAllOfFlag,!0);let titleIndex=-1,refIndex=0,siblingIndex=-1;if(options.syntheticTitleFlag&&(null==rules?void 0:rules.resolvedReferenceNamePropertyKey)){let syntheticTitle=syntheticTitleCache.get(reference.normalized);void 0===syntheticTitle&&(syntheticTitle=function evaluateSyntheticTitle(path,syntheticTitleFlag,targetPropertyKey){return path.length?{[targetPropertyKey]:path[path.length-1].toString(),[syntheticTitleFlag]:!0}:{}}(reference.jsonPath,options.syntheticTitleFlag,rules.resolvedReferenceNamePropertyKey),syntheticTitleCache.set(reference.normalized,syntheticTitle),state.lazySourceOriginCollector.set(syntheticTitle,{[rules.resolvedReferenceNamePropertyKey]:refOrigin?[refOrigin]:[]})),wrap2.allOf.push(syntheticTitle),titleIndex=0,refIndex++}wrap2.allOf.push(refJso),options.originsFlag&&getOrReuseOrigin(refJso,originForObj,state.originCache),Reflect.ownKeys(sibling2).length&&(wrap2.allOf.push(sibling2),siblingIndex=refIndex+1,options.originsFlag&&getOrReuseOrigin(sibling2,originForObj,state.originCache));const childrenOrigins2={};return 1===wrap2.allOf.length?{value:refJso,state:{...state,originParent:refOrigin,originCollector:childrenOrigins2},afterHooksHook:()=>{const node=state.node[safeKey];options.originsFlag&&qubershipApihubJsonCrawl.isObject(node)&&(state.originCollector[safeKey]=[getOrReuseOrigin(node,originForObj,state.originCache)],state.lazySourceOriginCollector.set(node,state.lazySourceOriginCollector.get(value)??{}))},exitHook:()=>{const node=state.node[safeKey];if(options.inlineRefsFlag&&qubershipApihubJsonCrawl.isObject(node)&&addRefInlineHistory(node,options.inlineRefsFlag,reference),options.originsFlag&&qubershipApihubJsonCrawl.isObject(node)&&refOrigin){state.originCollector[safeKey]=[originForObj];const lazyOrigins=state.lazySourceOriginCollector.get(value)??{};node[options.originsFlag]={...node[options.originsFlag]??{},...lazyOrigins,...childrenOrigins2}}}}:(state.syntheticsJumps.set(wrap2,(()=>wrap2.allOf[refIndex])),{value:wrap2,state:{...state,originParent:originForObj,originCollector:{}},afterHooksHook:()=>{const node=state.node[safeKey];options.originsFlag&&qubershipApihubJsonCrawl.isObject(node)&&(state.originCollector[safeKey]=[getOrReuseOrigin(node,originForObj,state.originCache)])},exitHook:()=>{const clonedAllOf=state.node[safeKey],alreadyExistedIndexOrigins={[refIndex]:[originForRef]};titleIndex>=0&&(alreadyExistedIndexOrigins[titleIndex]=[originForRef]),siblingIndex>=0&&(alreadyExistedIndexOrigins[siblingIndex]=[originForObj]),state.syntheticsJumps.set(clonedAllOf,(()=>clonedAllOf.allOf[refIndex]));const clonedAllArray=clonedAllOf.allOf,clonedRef=clonedAllArray[refIndex];if(options.inlineRefsFlag&&qubershipApihubJsonCrawl.isObject(clonedRef)&&addRefInlineHistory(clonedRef,options.inlineRefsFlag,reference),options.originsFlag&&qubershipApihubJsonCrawl.isObject(clonedRef)&&refOrigin){state.originCollector[safeKey]=[originForObj];const lazyOrigins=state.lazySourceOriginCollector.get(value)??{};clonedRef[options.originsFlag]={...clonedRef[options.originsFlag]??{},...lazyOrigins,...childrenOrigins2},clonedAllArray[options.originsFlag]={...clonedAllArray[options.originsFlag]??{},...alreadyExistedIndexOrigins},Object.assign(clonedAllOf,{[options.originsFlag]:{[JSON_SCHEMA_PROPERTY_ALL_OF]:[originForObj]}})}}})};if(cyclingGuard.has(reference.normalized))return{value:void 0,done:!0};cyclingGuard.add(reference.normalized);try{const updateLazyParentChainItem=(item,parentValue,propertyKey)=>state.lazySourceOriginCollector.set(parentValue,{...state.lazySourceOriginCollector.get(parentValue)??{},[propertyKey]:[item]}),refInResultedJso=resolveRefNode(reference,state.root[qubershipApihubJsonCrawl.JSON_ROOT_KEY],defineOriginsAndResolveRefHook,cycleJsoHook,state,rules,options.originsFlag?(value2,parentChain,parentValue,propertyKey)=>getOrSimpleCreateOrigin(value2,parentChain,propertyKey,state.originCache):void 0);if(void 0!==(null==refInResultedJso?void 0:refInResultedJso.refValue)&&null!==(null==refInResultedJso?void 0:refInResultedJso.refValue)){const{refValue,origin}=refInResultedJso;return wrapRefWithAllOfIfNeed(refValue,sibling,origin)}const refInSourceJso=resolveRefNode(reference,options.source,defineOriginsAndResolveRefHook,cycleJsoHook,state,rules,options.originsFlag?(value2,parentChain,parentValue,propertyKey)=>getOrCustomCreateOrigin(value2,(()=>{const resolvedPath=parentChain?pathItemToFullPath(parentChain):[],parentValueFromAlreadyCopiedJso=resolveValueByPath(state.root[qubershipApihubJsonCrawl.JSON_ROOT_KEY],resolvedPath);if(qubershipApihubJsonCrawl.isObject(parentValueFromAlreadyCopiedJso)&&propertyKey in parentValueFromAlreadyCopiedJso)return getOrSimpleCreateOrigin(parentValueFromAlreadyCopiedJso[propertyKey],parentChain,propertyKey,state.originCache);const parentValueThatNotYetHandledFromMain=resolveValueByPath(rootJso,resolvedPath);return qubershipApihubJsonCrawl.isObject(parentValueThatNotYetHandledFromMain)&&propertyKey in parentValueThatNotYetHandledFromMain?getOrSimpleCreateOrigin(parentValueThatNotYetHandledFromMain[propertyKey],parentChain,propertyKey,state.originCache,(item=>updateLazyParentChainItem(item,parentValueThatNotYetHandledFromMain,propertyKey))):getOrSimpleCreateOrigin(value2,parentChain,propertyKey,state.originCache,(item=>updateLazyParentChainItem(item,parentValue,propertyKey)))}),state.originCache):void 0);if(void 0!==(null==refInSourceJso?void 0:refInSourceJso.refValue)&&null!==(null==refInSourceJso?void 0:refInSourceJso.refValue)){const{refValue,origin}=refInSourceJso;return wrapRefWithAllOfIfNeed(refValue,sibling,origin)}null==(_c=options.onRefResolveError)||_c.call(options,ErrorMessage_refNotFound($ref),path,$ref,RefErrorTypes.REF_NOT_FOUND);const brokenValueClone={[JSON_SCHEMA_PROPERTY_REF]:$ref};return state.node[safeKey]=brokenValueClone,setOrigins(state.node,safeKey,options.originsFlag,[originForObj]),setOrigins(brokenValueClone,JSON_SCHEMA_PROPERTY_REF,options.originsFlag,[originForRef]),{done:!0}}finally{cyclingGuard.delete(reference.normalized)}}}const childrenOrigins=state.lazySourceOriginCollector.get(value)??{};return{value,state:{...state,originCollector:childrenOrigins,originParent:originForObj},afterHooksHook:()=>{const node=state.node[safeKey];options.originsFlag&&qubershipApihubJsonCrawl.isObject(node)&&(state.originCollector[safeKey]=[getOrReuseOrigin(node,originForObj,state.originCache)],state.lazySourceOriginCollector.set(node,childrenOrigins))},exitHook:()=>{const node=state.node[safeKey];if(options.originsFlag&&qubershipApihubJsonCrawl.isObject(node)){state.originCollector[safeKey]=[getOrReuseOrigin(node,originForObj,state.originCache)];const lazyOrigins=state.lazySourceOriginCollector.get(value)??{};node[options.originsFlag]={...node[options.originsFlag]??{},...lazyOrigins,...childrenOrigins}}}}};return defineOriginsAndResolveRefHook},addRefInlineHistory=(jso,inlineRefsFlag,reference)=>{let history=jso[inlineRefsFlag];history||(jso[inlineRefsFlag]=history=[]);const normalized=reference.normalized;history.includes(normalized)||history.push(normalized)},resolveRefNode=(reference,source,resolveRefHook,cycleJsoHook,state,rules,originResolver)=>{if(!qubershipApihubJsonCrawl.isObject(source))return;if(reference.filePath)return;let parentValue,pathChain,value=source;const path=parsePointer(reference.pointer);let isPureRef;for(;(isPureRef=isPureRefNode(value))||path.length;){const key=path[0];if(isPureRef){const originCollector={};if(parentValue=value,value=qubershipApihubJsonCrawl.syncClone(value,[cycleJsoHook,resolveRefHook,cycleJsoHook],{state:{...state,originParent:void 0,originCollector},rules}),isPureRefNode(value))return;pathChain=null==originResolver?void 0:originResolver(value,pathChain,parentValue,key);continue}const jumpF=state.syntheticsJumps.get(value);if(jumpF&&(value=jumpF()),Array.isArray(value)&&value.length>+key?(parentValue=value,value=value[+key],path.shift()):qubershipApihubJsonCrawl.isObject(value)&&key in value?(parentValue=value,value=value[key],path.shift()):(parentValue=value,value=void 0),void 0===value)return;pathChain=null==originResolver?void 0:originResolver(value,pathChain,parentValue,key)}return{refValue:value,origin:pathChain}};function getOrReuseOrigin(jsoInstance,origin,originCache,afterReuse){return getOrCustomCreateOrigin(jsoInstance,(()=>origin),originCache)}function getOrSimpleCreateOrigin(jsoInstance,parent,value,originCache,afterCreate){return getOrCustomCreateOrigin(jsoInstance,(()=>{const origin={parent,value};return null==afterCreate||afterCreate(origin),origin}),originCache)}function getOrCustomCreateOrigin(jsoInstance,originF,originCache){let result=originCache.get(jsoInstance);return result||(result=originF(),null==originCache||originCache.set(jsoInstance,result)),result}const createValidationHook=options=>({key,path,value,rules,state})=>{var _a,_b,_c,_d;if(state.ignoreTreeUnderSymbols)return{value};const safeKey=key??qubershipApihubJsonCrawl.JSON_ROOT_KEY;if("symbol"==typeof safeKey&&options.ignoreSymbols.has(safeKey))return{value,state:{...state,ignoreTreeUnderSymbols:!0,propertiesToCleanup:[]}};if(!rules)return null==(_a=options.onValidateError)||_a.call(options,`Key '${safeKey.toString()}' unexpected here`,path,value),state.propertiesToCleanup.push(key),{done:!0};const{validate:validate2=[]}=rules;if(!validate2)return null==(_b=options.onValidateError)||_b.call(options,`Key '${safeKey.toString()}' unexpected here`,path,value),state.propertiesToCleanup.push(key),{done:!0};const validatorsArray=qubershipApihubJsonCrawl.isArray(validate2)?validate2:[validate2];try{if(!validatorsArray.reduce(((valid2,f)=>valid2&&f(value)),!0))return null==(_c=options.onValidateError)||_c.call(options,`Value under '${safeKey.toString()}' excluded because doesn't match validation rule`,path,value),state.propertiesToCleanup.push(key),{done:!0};const nestedPropertiesToCleanup=[];return{value,state:{...state,propertiesToCleanup:nestedPropertiesToCleanup},exitHook:()=>{const clone=state.node[key];qubershipApihubJsonCrawl.isObject(clone)&&cleanSeveralOrigins(clone,nestedPropertiesToCleanup,options.originsFlag)}}}catch(e){return null==(_d=options.onValidateError)||_d.call(options,`Value under '${safeKey.toString()}' fail to validate`,path,value,e),state.propertiesToCleanup.push(key),{done:!0}}},createNativeAnySchema=(specType,origins,originsFlag)=>{const any={[JSON_SCHEMA_PROPERTY_ANY_OF]:[{[JSON_SCHEMA_PROPERTY_TYPE]:"boolean"},{[JSON_SCHEMA_PROPERTY_TYPE]:"string"},{[JSON_SCHEMA_PROPERTY_TYPE]:"number"},{[JSON_SCHEMA_PROPERTY_TYPE]:"integer"},{[JSON_SCHEMA_PROPERTY_TYPE]:"object"},{[JSON_SCHEMA_PROPERTY_TYPE]:"array"},{[JSON_SCHEMA_PROPERTY_TYPE]:"null"}]},anyAnyOf=any.anyOf;return specType===SPEC_TYPE_OPEN_API_30&&anyAnyOf.pop(),setOrigins(any,"anyOf",originsFlag,origins),setOriginsForArray(any.anyOf,originsFlag,anyAnyOf.map((()=>origins))),anyAnyOf.forEach((schemaWithType=>{setOrigins(schemaWithType,"type",originsFlag,origins)})),any},SOME_NATIVE_ANY={[SPEC_TYPE_JSON_SCHEMA_04]:createNativeAnySchema("json-schema-04",void 0,void 0),[SPEC_TYPE_JSON_SCHEMA_06]:createNativeAnySchema("json-schema-06",void 0,void 0),[SPEC_TYPE_JSON_SCHEMA_07]:createNativeAnySchema(SPEC_TYPE_JSON_SCHEMA_07,void 0,void 0),[SPEC_TYPE_OPEN_API_30]:createNativeAnySchema(SPEC_TYPE_OPEN_API_30,void 0,void 0),[SPEC_TYPE_OPEN_API_31]:createNativeAnySchema(SPEC_TYPE_OPEN_API_31,void 0,void 0),[SPEC_TYPE_ASYNCAPI_2]:createNativeAnySchema(SPEC_TYPE_ASYNCAPI_2,void 0,void 0),[SPEC_TYPE_GRAPH_API]:createNativeAnySchema(SPEC_TYPE_GRAPH_API,void 0,void 0)},createNativeMetaDefinitions=(specType,originsFlag)=>{const someNativeAny=SOME_NATIVE_ANY[specType],matchAnyOfFunctions=someNativeAny.anyOf.map(((value,index)=>(otherArray,prefixPath,skip)=>{const otherArrayItem=otherArray[index];if(!(null==skip?void 0:skip(otherArrayItem,[...prefixPath,index]))&&"type"in otherArrayItem&&otherArrayItem.type===value.type){if(null==skip?void 0:skip(otherArrayItem.type,[...prefixPath,index,"type"]))return;const{type,...otherProperties}=otherArrayItem,entries=Object.entries(otherProperties);if(0===entries.length)return otherProperties;if(entries.some((([otherPrpKey,otherPrpVal])=>!!(null==skip?void 0:skip(otherPrpVal,[...prefixPath,index,otherPrpKey])))))return;return otherProperties}})),extractCommonPropertiesIfAssignableToAnyOf=(jso,prefixPath,originsFlag2,skip)=>{if(!("anyOf"in jso))return;const{anyOf,...rootProperties}=jso;return cleanOrigins(rootProperties,"anyOf",originsFlag2),qubershipApihubJsonCrawl.isArray(anyOf)&&anyOf.length===someNativeAny.anyOf.length&&!(null==skip?void 0:skip(anyOf,["anyOf"]))?matchAnyOfFunctions.reduce(((overallPropertiesToPull,f)=>{if(!overallPropertiesToPull)return;const extraItemProperties=f(anyOf,[...prefixPath,"anyOf"],skip);if(extraItemProperties){for(const prp in extraItemProperties){if(prp in overallPropertiesToPull&&extraItemProperties[prp]!==overallPropertiesToPull[prp])return;overallPropertiesToPull[prp]=extraItemProperties[prp],copyOrigins(extraItemProperties,overallPropertiesToPull,prp,prp,originsFlag2)}return overallPropertiesToPull}}),rootProperties):void 0},anyCache=createEvaluationCacheService(),nothingCache=createEvaluationCacheService();return{emptyJsonSchema:origins=>anyCache.cacheEvaluationResultByFootprint([specType,...origins??[],originsFlag],(()=>createNativeAnySchema(specType,origins,originsFlag))),invertedEmptyJsonSchema:origins=>nothingCache.cacheEvaluationResultByFootprint([specType,...origins??[],originsFlag],(()=>((specType,origins,originsFlag)=>{const nothing={[JSON_SCHEMA_PROPERTY_NOT]:createNativeAnySchema(specType,origins,originsFlag)};return setOrigins(nothing,"not",originsFlag,origins),nothing})(specType,origins,originsFlag))),omitIfAssignableToEmptyJsonSchema:(jso,skip)=>{const overallCommonProperties=extractCommonPropertiesIfAssignableToAnyOf(jso,[],originsFlag,skip);if(!overallCommonProperties)return;delete jso.anyOf;const resultedOrigins=resolveOrigins(jso,"anyOf",originsFlag)??[];return cleanOrigins(jso,"anyOf",originsFlag),mergeOrigins(overallCommonProperties,[jso],originsFlag),Object.assign(jso,overallCommonProperties),resultedOrigins},omitIfAssignableToInvertedEmptyJsonSchema:(jso,skip)=>{if(!("not"in jso))return;const{not,..._}=jso;if(!qubershipApihubJsonCrawl.isObject(not))return;if(null==skip?void 0:skip(not,["not"]))return;if(!extractCommonPropertiesIfAssignableToAnyOf(not,["not"],originsFlag,skip))return;delete jso.not;const resultedOrigins=resolveOrigins(jso,"not",originsFlag)??[];return cleanOrigins(jso,"not",originsFlag),resultedOrigins}}},createSyntheticMetaDefinitions=(_,originsFlag)=>{const anyCache=createEvaluationCacheService(),nothingCache=createEvaluationCacheService();return{emptyJsonSchema:origins=>anyCache.cacheEvaluationResultByFootprint([...origins??[],originsFlag],(()=>((origins,originsFlag)=>{const any={[JSON_SCHEMA_PROPERTY_TYPE]:"any"};return setOrigins(any,"type",originsFlag,origins),any})(origins,originsFlag))),invertedEmptyJsonSchema:origins=>nothingCache.cacheEvaluationResultByFootprint([...origins??[],originsFlag],(()=>((origins,originsFlag)=>{const nothing={[JSON_SCHEMA_PROPERTY_TYPE]:"nothing"};return setOrigins(nothing,"type",originsFlag,origins),nothing})(origins,originsFlag))),omitIfAssignableToEmptyJsonSchema:(jso,skip)=>{if("type"in jso&&"any"===jso.type){if(null==skip?void 0:skip(jso.type,["type"]))return;delete jso.type;const origins=resolveOrigins(jso,"type",originsFlag)??[];return cleanOrigins(jso,"type",originsFlag),origins}},omitIfAssignableToInvertedEmptyJsonSchema:(jso,skip)=>{if("type"in jso&&"nothing"===jso.type){if(null==skip?void 0:skip(jso.type,["type"]))return;delete jso.type;const origins=resolveOrigins(jso,"type",originsFlag)??[];return cleanOrigins(jso,"type",originsFlag),origins}}}},createNativeMetaDefinitionsForDeUnify=(specType,originsFlag)=>{const nat=createNativeMetaDefinitions(specType,originsFlag),syn=createSyntheticMetaDefinitions(0,originsFlag),nothingCache=createEvaluationCacheService();return{emptyJsonSchema:nat.emptyJsonSchema,invertedEmptyJsonSchema:origins=>{const emptyJsonSchema=syn.emptyJsonSchema(origins);return nothingCache.cacheEvaluationResultByFootprint([emptyJsonSchema,...origins??[],originsFlag],(()=>((emptySchema,origins,originsFlag)=>{const nothing={[JSON_SCHEMA_PROPERTY_NOT]:emptySchema};return setOrigins(nothing,"not",originsFlag,origins),nothing})(emptyJsonSchema,origins,originsFlag)))},omitIfAssignableToEmptyJsonSchema:nat.omitIfAssignableToEmptyJsonSchema,omitIfAssignableToInvertedEmptyJsonSchema:(jso,skip)=>{if(!("not"in jso))return;const{not,...rootProperties}=jso;if(qubershipApihubJsonCrawl.isObject(not)&&!(null==skip?void 0:skip(not,["not"]))&&"type"in not&&"any"===not.type){if(null==skip?void 0:skip(not.type,["not","type"]))return;delete jso.not;const origins=resolveOrigins(jso,"not",originsFlag)??[];return cleanOrigins(jso,"not",originsFlag),origins}}}},createAllOfResolverHook=options=>({value,key,path,rules,state})=>{var _a;if(state.ignoreTreeUnderSymbols)return{value};const safeKey=key??qubershipApihubJsonCrawl.JSON_ROOT_KEY;if("symbol"==typeof safeKey&&options.ignoreSymbols.has(safeKey))return{value,state:{...state,ignoreTreeUnderSymbols:!0}};const mergeError=(valuesWithOrigins,message=ErrorMessage_mergeError())=>{var _a2;return null==(_a2=options.onMergeError)?void 0:_a2.call(options,message,path,valuesWithOrigins.map((valueWithOrigins=>valueWithOrigins.value)))};if(!qubershipApihubJsonCrawl.isObject(value)||Array.isArray(value))return{value};if(!(rules=>!!rules&&rules["/allOf"]&&"merge"in rules["/allOf"])(rules))return{value};const[allOf,sibling]=options.spreadAllOfCache.spreadOrReuse(value),rawAllOfItemsWithOrigins=[];if(Array.isArray(allOf)&&rawAllOfItemsWithOrigins.push(...allOf.map(((item,index)=>({value:item,origins:resolveOrigins(allOf,index,options.originsFlag)??[]})))),isSiblingKeysAreImportant(sibling,options)&&rawAllOfItemsWithOrigins.push({value:sibling,origins:state.selfOriginResolver(key)??[]}),!rawAllOfItemsWithOrigins.length)return{value:sibling};const rawPlainAllOfItemsWithOrigins=flattenAllOfItems(rawAllOfItemsWithOrigins,options),plainAllOfItemsWithOrigins=unifyBooleanSchemas(rawPlainAllOfItemsWithOrigins,options);if(plainAllOfItemsWithOrigins.some((valueWithOrigins=>isRefNode(valueWithOrigins.value))))return null==(_a=options.onMergeError)||_a.call(options,ErrorMessage_mergeWithBrokenRef(),path,plainAllOfItemsWithOrigins.map((valueWithOrigins=>valueWithOrigins.value))),{value};const plainAllOfItemsWithOriginsAsKey=plainAllOfItemsWithOrigins.map((pair=>pair.value)),resultValue=options.evaluationCacheService.cacheEvaluationResultByFootprint(plainAllOfItemsWithOriginsAsKey,(()=>{let result;if(plainAllOfItemsWithOrigins.length<2)result=plainAllOfItemsWithOrigins.length?plainAllOfItemsWithOrigins[0].value:{};else{const complexResult=jsonSchemaMergeResolver(plainAllOfItemsWithOrigins,{options,allMergeItemsWithOrigins:plainAllOfItemsWithOrigins,mergeRules:rules,mergeError});result=null==complexResult?void 0:complexResult.value}return result}),{},((result,guard)=>result&&guard?copyDescriptors(guard,result):result));return resultValue?{value:resultValue,state:{...state}}:(state.node[safeKey]=value,{done:!0})};function toForwardMutationFunction(value){return"function"==typeof value?value:value.forward}const createUnifyHook=(options,mandatoryOnly)=>({key,path,value,rules,state})=>{var _a;const safeKey=key??qubershipApihubJsonCrawl.JSON_ROOT_KEY;if(state.ignoreTreeUnderSymbols)return{value};if("symbol"==typeof safeKey)return{value,state:{...state,ignoreTreeUnderSymbols:!0}};if(!rules)return{value};const{unify:unify2,mandatoryUnify}=rules,activeUnify=mandatoryOnly?mandatoryUnify:unify2;if(!activeUnify)return{value};const unifiesFunctionsArray=(qubershipApihubJsonCrawl.isArray(activeUnify)?activeUnify:[activeUnify]).map(toForwardMutationFunction);if(0===unifiesFunctionsArray.length)return{value};try{const context={origins:state.selfOriginResolver(key),options,path};return{value:unifiesFunctionsArray.reduce(((v,f)=>f(v,context)),value)}}catch(e){return null==(_a=options.onUnifyError)||_a.call(options,`Value under '${safeKey}' fail to unify`,path,value,e),{done:!0}}},createDeUnifyHook=(options,mandatoryOnly)=>({key,path,value,rules,state})=>{if(state.ignoreTreeUnderSymbols)return{value};const safeKey=key??qubershipApihubJsonCrawl.JSON_ROOT_KEY;if("symbol"==typeof safeKey&&options.ignoreSymbols.has(safeKey))return{value,state:{...state,ignoreTreeUnderSymbols:!0}};if(!rules)return{value};const{unify:unify2,mandatoryUnify}=rules,activeUnify=mandatoryOnly?mandatoryUnify:unify2;if(!activeUnify)return{value};const deUnifiesFunctionsArray=(qubershipApihubJsonCrawl.isArray(activeUnify)?activeUnify:[activeUnify]).flatMap((f=>{const nf=function toBackwardMutationFunction(value){return"function"==typeof value?void 0:value.backward}(f);return nf?[nf]:[]})).reverse();return 0===deUnifiesFunctionsArray.length?{value}:{value,exitHook:()=>{var _a;try{const context={origins:state.selfOriginResolver(key),options,path},copiedValue=state.node[safeKey];deUnifiesFunctionsArray.forEach((f=>f(copiedValue,context)))}catch(e){null==(_a=options.onUnifyError)||_a.call(options,`Value under '${safeKey.toString()}' fail to deunify`,path,value,e)}}}},unifyImpl=(value,mandatoryOnly,options)=>{const spec=resolveSpec(value),internalOptions={resolveRef:true,originsAlreadyDefined:false,mergeAllOf:true,liftCombiners:false,allowNotValidSyntheticChanges:false,createOriginsForDefaults:()=>DEFAULT_OPTION_ORIGINS_FOR_DEFAULTS,...options,evaluationCacheService:createEvaluationCacheService(),spreadAllOfCache:createPropertySpreadWithCacheService("allOf"),syntheticMetaDefinitions:createSyntheticMetaDefinitions(spec.type,null==options?void 0:options.originsFlag),nativeMetaDefinitions:createNativeMetaDefinitions(spec.type,null==options?void 0:options.originsFlag),ignoreSymbols:new Set([...(null==options?void 0:options.originsFlag)?[options.originsFlag]:[],...(null==options?void 0:options.inlineRefsFlag)?[options.inlineRefsFlag]:[],...(null==options?void 0:options.syntheticTitleFlag)?[options.syntheticTitleFlag]:[],...(null==options?void 0:options.defaultsFlag)?[options.defaultsFlag]:[],...(null==options?void 0:options.syntheticAllOfFlag)?[options.syntheticAllOfFlag]:[],...(null==options?void 0:options.ignoreSymbols)?options.ignoreSymbols:[]])},cycledJsoHandlerHook=createCycledJsoHandlerHook();return qubershipApihubJsonCrawl.syncClone(value,[cycledJsoHandlerHook,createUnifyHook(internalOptions,mandatoryOnly),cycledJsoHandlerHook,createSelfOriginsCloneHook(internalOptions.originsFlag)],{rules:RULES[spec.type]||{},state:{ignoreTreeUnderSymbols:!1,selfOriginResolver:()=>[]}})},deUnifyImpl=(value,mandatoryOnly,options)=>{const spec=resolveSpec(value),internalOptions={resolveRef:true,originsAlreadyDefined:false,mergeAllOf:true,liftCombiners:false,allowNotValidSyntheticChanges:false,createOriginsForDefaults:()=>DEFAULT_OPTION_ORIGINS_FOR_DEFAULTS,...options,evaluationCacheService:createEvaluationCacheService(),spreadAllOfCache:createPropertySpreadWithCacheService("allOf"),syntheticMetaDefinitions:createSyntheticMetaDefinitions(spec.type,null==options?void 0:options.originsFlag),nativeMetaDefinitions:createNativeMetaDefinitionsForDeUnify(spec.type,null==options?void 0:options.originsFlag),ignoreSymbols:new Set([...(null==options?void 0:options.originsFlag)?[options.originsFlag]:[],...(null==options?void 0:options.inlineRefsFlag)?[options.inlineRefsFlag]:[],...(null==options?void 0:options.syntheticTitleFlag)?[options.syntheticTitleFlag]:[],...(null==options?void 0:options.defaultsFlag)?[options.defaultsFlag]:[],...(null==options?void 0:options.syntheticAllOfFlag)?[options.syntheticAllOfFlag]:[],...(null==options?void 0:options.ignoreSymbols)?options.ignoreSymbols:[]])},cycledJsoHandlerHook=createCycledJsoHandlerHook();return qubershipApihubJsonCrawl.syncClone(value,[cycledJsoHandlerHook,createDeUnifyHook(internalOptions,mandatoryOnly),cycledJsoHandlerHook,createSelfOriginsCloneHook(internalOptions.originsFlag)],{rules:RULES[spec.type]||{},state:{ignoreTreeUnderSymbols:!1,selfOriginResolver:()=>[]}})},createHashObjectCreatorHook=()=>{const cycleGuard=new Set;return({key,value,rules,state})=>{if("symbol"==typeof key)return{done:!0};if(!rules)return{done:!0};let ignoreKey=!0;switch(rules.hashStrategy){case CURRENT_DATA_LEVEL:ignoreKey=state.dataLevel>0;break;case"second-data-levels":ignoreKey=state.dataLevel>1}return qubershipApihubJsonCrawl.isObject(value)?cycleGuard.has(value)?{done:ignoreKey,value:rules.newDataLayer?value:void 0,state:{...state,dataLevel:void 0!==key&&rules.newDataLayer?state.dataLevel+1:state.dataLevel}}:(cycleGuard.add(value),{done:ignoreKey,value,state:{...state,dataLevel:void 0!==key&&rules.newDataLayer?state.dataLevel+1:state.dataLevel}}):{done:ignoreKey,value}}},createHashScannerHook=options=>{const flag=options.hashFlag??Symbol("should-never-happen"),cycleGuard=new Set;return({key,value,rules})=>"symbol"==typeof key?{done:!0}:qubershipApihubJsonCrawl.isObject(value)?cycleGuard.has(value)?{done:!0}:(cycleGuard.add(value),{value,exitHook:(null==rules?void 0:rules.hashOwner)?()=>{let hash2;value[flag]=()=>{var object;return hash2||(object=((object,rules)=>{const creatorHook=createHashObjectCreatorHook();return qubershipApihubJsonCrawl.syncClone(object,creatorHook,{state:{dataLevel:0},rules})})(value,rules),hash2=objectHash(object,{unorderedArrays:!0,unorderedObjects:!0,algorithm:"md5"})),hash2}}:void 0}):{done:!0}},createRemoveOasExtensionsHook=options=>({key,value,rules})=>{var _a;return(null==rules?void 0:rules.isExtension)&&(null==(_a=options.shouldRemoveOasExtension)?void 0:_a.call(options,key))?{value:void 0}:{value}};function createOptionsWithDefaults(options){return{resolveRef:true,validate:false,mergeAllOf:true,unify:false,liftCombiners:false,allowNotValidSyntheticChanges:false,originsAlreadyDefined:false,...options}}function areDeprecatedOriginsNotEmpty(value,originsSymbol){const deprecatedOrigins=resolveOrigins(value,JSON_SCHEMA_PROPERTY_DEPRECATED,originsSymbol);return!!deprecatedOrigins&&deprecatedOrigins.every((item=>Object.keys(item).length>0))}exports.BEFORE_SECOND_DATA_LEVEL="second-data-levels",exports.CURRENT_DATA_LEVEL=CURRENT_DATA_LEVEL,exports.DEFAULT_OPTION_ALLOW_NOT_VALID_SYNTHETIC_CHANGES=false,exports.DEFAULT_OPTION_LIFT_COMBINERS=false,exports.DEFAULT_OPTION_MERGE_ALL_OF=true,exports.DEFAULT_OPTION_ORIGINS_ALREADY_DEFINED=false,exports.DEFAULT_OPTION_ORIGINS_FOR_DEFAULTS=DEFAULT_OPTION_ORIGINS_FOR_DEFAULTS,exports.DEFAULT_OPTION_RESOLVE_REF=true,exports.DEFAULT_OPTION_UNIFY=false,exports.DEFAULT_OPTION_VALIDATE=false,exports.DEFAULT_TYPE_FLAG_PURE="pure",exports.DEFAULT_TYPE_FLAG_SYNTHETIC="synthetic",exports.GRAPH_API_PROPERTY_ARGS="args",exports.GRAPH_API_PROPERTY_COMPONENTS="components",exports.GRAPH_API_PROPERTY_DEFAULT="default",exports.GRAPH_API_PROPERTY_DEFINITION="definition",exports.GRAPH_API_PROPERTY_DEPRECATED_DIRECTIVE="deprecated",exports.GRAPH_API_PROPERTY_DIRECTIVES="directives",exports.GRAPH_API_PROPERTY_ENUMS="enums",exports.GRAPH_API_PROPERTY_INPUT_OBJECTS="inputObjects",exports.GRAPH_API_PROPERTY_INTERFACES="interfaces",exports.GRAPH_API_PROPERTY_KIND="kind",exports.GRAPH_API_PROPERTY_LOCATIONS="locations",exports.GRAPH_API_PROPERTY_META="meta",exports.GRAPH_API_PROPERTY_METHODS="methods",exports.GRAPH_API_PROPERTY_MUTATIONS="mutations",exports.GRAPH_API_PROPERTY_NULLABLE="nullable",exports.GRAPH_API_PROPERTY_OBJECTS="objects",exports.GRAPH_API_PROPERTY_ONE_OF="oneOf",exports.GRAPH_API_PROPERTY_PROPERTIES="properties",exports.GRAPH_API_PROPERTY_QUERIES="queries",exports.GRAPH_API_PROPERTY_REPEATABLE="repeatable",exports.GRAPH_API_PROPERTY_SCALARS="scalars",exports.GRAPH_API_PROPERTY_SUBSCRIPTIONS="subscriptions",exports.GRAPH_API_PROPERTY_TITLE="title",exports.GRAPH_API_PROPERTY_TYPE="type",exports.GRAPH_API_PROPERTY_UNIONS="unions",exports.GRAPH_API_PROPERTY_VALUES="values",exports.JSON_SCHEMA_NODE_NORMALIZED_TYPES=JSON_SCHEMA_NODE_NORMALIZED_TYPES,exports.JSON_SCHEMA_NODE_SYNTHETIC_TYPES=JSON_SCHEMA_NODE_SYNTHETIC_TYPES,exports.JSON_SCHEMA_NODE_SYNTHETIC_TYPE_ANY="any",exports.JSON_SCHEMA_NODE_SYNTHETIC_TYPE_NOTHING="nothing",exports.JSON_SCHEMA_NODE_TYPES=JSON_SCHEMA_NODE_TYPES,exports.JSON_SCHEMA_NODE_TYPE_ARRAY="array",exports.JSON_SCHEMA_NODE_TYPE_BOOLEAN="boolean",exports.JSON_SCHEMA_NODE_TYPE_INTEGER="integer",exports.JSON_SCHEMA_NODE_TYPE_NULL="null",exports.JSON_SCHEMA_NODE_TYPE_NUMBER="number",exports.JSON_SCHEMA_NODE_TYPE_OBJECT="object",exports.JSON_SCHEMA_NODE_TYPE_STRING="string",exports.JSON_SCHEMA_PROPERTY_ADDITIONAL_ITEMS="additionalItems",exports.JSON_SCHEMA_PROPERTY_ADDITIONAL_PROPERTIES="additionalProperties",exports.JSON_SCHEMA_PROPERTY_ALL_OF="allOf",exports.JSON_SCHEMA_PROPERTY_ANY_OF="anyOf",exports.JSON_SCHEMA_PROPERTY_CONST="const",exports.JSON_SCHEMA_PROPERTY_CONTAINS="contains",exports.JSON_SCHEMA_PROPERTY_CONTENT_MEDIA_TYPE="contentMediaType",exports.JSON_SCHEMA_PROPERTY_DEFAULT="default",exports.JSON_SCHEMA_PROPERTY_DEFINITIONS="definitions",exports.JSON_SCHEMA_PROPERTY_DEFS="defs",exports.JSON_SCHEMA_PROPERTY_DEPENDENCIES="dependencies",exports.JSON_SCHEMA_PROPERTY_DEPRECATED=JSON_SCHEMA_PROPERTY_DEPRECATED,exports.JSON_SCHEMA_PROPERTY_DESCRIPTION="description",exports.JSON_SCHEMA_PROPERTY_ENUM="enum",exports.JSON_SCHEMA_PROPERTY_EXAMPLES="examples",exports.JSON_SCHEMA_PROPERTY_EXCLUSIVE_MAXIMUM="exclusiveMaximum",exports.JSON_SCHEMA_PROPERTY_EXCLUSIVE_MINIMUM="exclusiveMinimum",exports.JSON_SCHEMA_PROPERTY_FORMAT="format",exports.JSON_SCHEMA_PROPERTY_ITEMS="items",exports.JSON_SCHEMA_PROPERTY_MAXIMUM="maximum",exports.JSON_SCHEMA_PROPERTY_MAX_ITEMS="maxItems",exports.JSON_SCHEMA_PROPERTY_MAX_LENGTH="maxLength",exports.JSON_SCHEMA_PROPERTY_MAX_PROPERTIES="maxProperties",exports.JSON_SCHEMA_PROPERTY_MINIMUM="minimum",exports.JSON_SCHEMA_PROPERTY_MIN_ITEMS="minItems",exports.JSON_SCHEMA_PROPERTY_MIN_LENGTH="minLength",exports.JSON_SCHEMA_PROPERTY_MIN_PROPERTIES="minProperties",exports.JSON_SCHEMA_PROPERTY_MULTIPLE_OF="multipleOf",exports.JSON_SCHEMA_PROPERTY_NOT="not",exports.JSON_SCHEMA_PROPERTY_NULLABLE="nullable",exports.JSON_SCHEMA_PROPERTY_ONE_OF="oneOf",exports.JSON_SCHEMA_PROPERTY_PATTERN="pattern",exports.JSON_SCHEMA_PROPERTY_PATTERN_PROPERTIES="patternProperties",exports.JSON_SCHEMA_PROPERTY_PROPERTIES="properties",exports.JSON_SCHEMA_PROPERTY_PROPERTY_NAMES="propertyNames",exports.JSON_SCHEMA_PROPERTY_READ_ONLY="readOnly",exports.JSON_SCHEMA_PROPERTY_REF=JSON_SCHEMA_PROPERTY_REF,exports.JSON_SCHEMA_PROPERTY_REQUIRED="required",exports.JSON_SCHEMA_PROPERTY_TITLE="title",exports.JSON_SCHEMA_PROPERTY_TYPE="type",exports.JSON_SCHEMA_PROPERTY_UNIQUE_ITEMS="uniqueItems",exports.JSON_SCHEMA_PROPERTY_WRITE_ONLY="writeOnly",exports.MapArray=MapArray,exports.OPEN_API_HTTP_METHODS=OPEN_API_HTTP_METHODS,exports.OPEN_API_HTTP_METHOD_DELETE="delete",exports.OPEN_API_HTTP_METHOD_GET="get",exports.OPEN_API_HTTP_METHOD_HEAD="head",exports.OPEN_API_HTTP_METHOD_OPTIONS="options",exports.OPEN_API_HTTP_METHOD_PATCH="patch",exports.OPEN_API_HTTP_METHOD_POST="post",exports.OPEN_API_HTTP_METHOD_PUT="put",exports.OPEN_API_HTTP_METHOD_TRACE="trace",exports.OPEN_API_PROPERTY_ALLOW_EMPTY_VALUE="allowEmptyValue",exports.OPEN_API_PROPERTY_ALLOW_RESERVED="allowReserved",exports.OPEN_API_PROPERTY_COMPONENTS="components",exports.OPEN_API_PROPERTY_CONTENT="content",exports.OPEN_API_PROPERTY_DEPRECATED="deprecated",exports.OPEN_API_PROPERTY_DESCRIPTION="description",exports.OPEN_API_PROPERTY_ENCODING="encoding",exports.OPEN_API_PROPERTY_EXAMPLE="example",exports.OPEN_API_PROPERTY_EXAMPLES="examples",exports.OPEN_API_PROPERTY_HEADERS="headers",exports.OPEN_API_PROPERTY_LINKS="links",exports.OPEN_API_PROPERTY_PARAMETERS="parameters",exports.OPEN_API_PROPERTY_PATHS="paths",exports.OPEN_API_PROPERTY_REQUEST_BODIES="requestBodies",exports.OPEN_API_PROPERTY_REQUEST_BODY="requestBody",exports.OPEN_API_PROPERTY_REQUIRED="required",exports.OPEN_API_PROPERTY_RESPONSES="responses",exports.OPEN_API_PROPERTY_SCHEMA="schema",exports.OPEN_API_PROPERTY_SCHEMAS="schemas",exports.OPEN_API_PROPERTY_SECURITY_SCHEMAS="securitySchemes",exports.OPEN_API_PROPERTY_TAGS="tags",exports.OPEN_API_PROPERTY_VALUE="value",exports.PREDICATE_ANY_VALUE=PREDICATE_ANY_VALUE,exports.PREDICATE_UNCLOSED_END=PREDICATE_UNCLOSED_END,exports.RefErrorTypes=RefErrorTypes,exports.SPEC_TYPE_ASYNCAPI_2=SPEC_TYPE_ASYNCAPI_2,exports.SPEC_TYPE_GRAPH_API=SPEC_TYPE_GRAPH_API,exports.SPEC_TYPE_JSON_SCHEMA_04="json-schema-04",exports.SPEC_TYPE_JSON_SCHEMA_06="json-schema-06",exports.SPEC_TYPE_JSON_SCHEMA_07=SPEC_TYPE_JSON_SCHEMA_07,exports.SPEC_TYPE_OPEN_API_30=SPEC_TYPE_OPEN_API_30,exports.SPEC_TYPE_OPEN_API_31=SPEC_TYPE_OPEN_API_31,exports.afterValue=function afterValue(reference,value){return{type:"after",reference,value}},exports.areDeprecatedOriginsNotEmpty=areDeprecatedOriginsNotEmpty,exports.arrayToSingleOrArray=function arrayToSingleOrArray(ts){return 1===ts.length?ts[0]:ts},exports.beforeValue=function beforeValue(reference,value){return{type:"before",reference,value}},exports.buildPointer=path=>path.length?"/"+path.map((i=>encodeURIComponent(String(i).replace(pathMask.tilde,"~0").replace(pathMask.slash,"~1")))).join("/"):"",exports.calculateDeprecatedItems=function calculateDeprecatedItems(data,originsSymbol){const spec=resolveSpec(data),deprecatedState={deprecatedItems:[],cycleGuard:new Set,inlineDescriptionSuffix:""};return qubershipApihubJsonCrawl.syncCrawl(data,[({key,value,state,rules})=>{var _a;if(state.cycleGuard.has(value)||"symbol"==typeof key)return{done:!0};if(!qubershipApihubJsonCrawl.isObject(value))return{done:!0};const localState={...state,values:state.cycleGuard.add(value)},descriptionCtx={key,source:value,paths:(null==(_a=resolveOrigins(value,JSON_SCHEMA_PROPERTY_DEPRECATED,originsSymbol))?void 0:_a.map(pathItemToFullPath))??[],suffix:state.inlineDescriptionSuffix},deprecatedRules=null==rules?void 0:rules.deprecation;if((null==deprecatedRules?void 0:deprecatedRules.inlineDescriptionSuffixCalculator)&&(localState.inlineDescriptionSuffix=null==deprecatedRules?void 0:deprecatedRules.inlineDescriptionSuffixCalculator(descriptionCtx)),!(deprecatedRules&&deprecatedRules.descriptionCalculator&&deprecatedRules.deprecationResolver))return{value,state:localState};const deprecatedReason=deprecatedRules.deprecationResolver(value);if(void 0!==deprecatedReason){if(!areDeprecatedOriginsNotEmpty(value,originsSymbol))throw new Error("Something wrong with origins");state.deprecatedItems.push({value,description:deprecatedRules.descriptionCalculator(descriptionCtx),...deprecatedReason?{deprecatedReason}:{}})}return{value,state:localState}}],{state:deprecatedState,rules:RULES[spec.type]}),deprecatedState.deprecatedItems},exports.calculateGCD=calculateGCD,exports.calculateLCM=calculateLCM,exports.calculateMatchingDepth=({predicate})=>{let gap=1;return predicate[predicate.length-1]===PREDICATE_UNCLOSED_END&&(gap+=1),predicate.length-gap},exports.cleanAllOrigins=cleanAllOrigins,exports.cleanOrigins=cleanOrigins,exports.cleanSeveralOrigins=cleanSeveralOrigins,exports.concatArrays=concatArrays$1,exports.concatenateArraysInProperty=concatenateArraysInProperty,exports.convertOriginToHumanReadable=function convertOriginToHumanReadable(t,originsFlag,addInstances=!1){const instanceMap=new Map,cycleGuard=new Set;return qubershipApihubJsonCrawl.syncCrawl(t,(({value})=>{if(cycleGuard.has(value))return{done:!0};if(cycleGuard.add(value),!qubershipApihubJsonCrawl.isObject(value))return{value};if(originsFlag in value){const metaRecord=value[originsFlag];Object.entries(metaRecord).forEach((([propertyKey,origins])=>{"string"!=typeof origins&&(metaRecord[propertyKey]=stringifyOrigins(origins,instanceMap,addInstances))}))}})),t},exports.copyDescriptors=copyDescriptors,exports.copyOrigins=copyOrigins,exports.copyOriginsForArray=copyOriginsForArray,exports.copyProperty=copyProperty,exports.createCycledJsoHandlerHook=createCycledJsoHandlerHook,exports.createEvaluationCacheService=createEvaluationCacheService,exports.createPropertySpreadWithCacheService=createPropertySpreadWithCacheService,exports.createRef=createRef,exports.createSelfMetaCloneHook=createSelfMetaCloneHook,exports.createSelfMetaCrawlHook=function createSelfMetaCrawlHook(stateProperty,metaFlag,defaultMeta=void 0){return createSelfMetaCloneHook(stateProperty,metaFlag,defaultMeta)},exports.createSelfOriginsCloneHook=createSelfOriginsCloneHook,exports.denormalize=(value,options={})=>{const optionsWithDefaults=createOptionsWithDefaults(options);let spec=value;return optionsWithDefaults.hashFlag&&(spec=((value,options)=>{const flag=null==options?void 0:options.hashFlag;if(!flag)return value;const cycleGuard=new Set;return qubershipApihubJsonCrawl.syncCrawl(value,(({value:value2})=>qubershipApihubJsonCrawl.isObject(value2)?cycleGuard.has(value2)?{done:!0}:(cycleGuard.add(value2),flag in value2&&delete value2[flag],{value:value2}):{done:!0})),value})(spec,optionsWithDefaults)),!optionsWithDefaults.mergeAllOf||optionsWithDefaults.unify||optionsWithDefaults.allowNotValidSyntheticChanges||(spec=((value,options)=>deUnifyImpl(value,!0,options))(spec,optionsWithDefaults)),optionsWithDefaults.unify&&(spec=((value,options)=>deUnifyImpl(value,!1,options))(spec,optionsWithDefaults)),(optionsWithDefaults.resolveRef||!optionsWithDefaults.originsAlreadyDefined&&optionsWithDefaults.originsFlag)&&(spec=((value,options)=>{const originsFlag=null==options?void 0:options.originsFlag,originsAlreadyDefined=null==options?void 0:options.originsAlreadyDefined,titleFlag=null==options?void 0:options.syntheticTitleFlag,allOfFlag=null==options?void 0:options.syntheticAllOfFlag,inlineFlag=null==options?void 0:options.inlineRefsFlag;if(!(originsFlag||titleFlag||allOfFlag||inlineFlag))return value;const ignoreSymbols=new Set([...(null==options?void 0:options.originsFlag)?[options.originsFlag]:[],...(null==options?void 0:options.inlineRefsFlag)?[options.inlineRefsFlag]:[],...(null==options?void 0:options.syntheticTitleFlag)?[options.syntheticTitleFlag]:[],...(null==options?void 0:options.syntheticAllOfFlag)?[options.syntheticAllOfFlag]:[],...(null==options?void 0:options.ignoreSymbols)?options.ignoreSymbols:[]]),cycleGuard=new Set;return qubershipApihubJsonCrawl.syncCrawl(value,(({key,value:value2})=>qubershipApihubJsonCrawl.isObject(value2)?ignoreSymbols.has(key)||cycleGuard.has(value2)?{done:!0}:(cycleGuard.add(value2),originsFlag&&!originsAlreadyDefined&&delete value2[originsFlag],titleFlag&&delete value2[titleFlag],allOfFlag&&delete value2[allOfFlag],inlineFlag&&delete value2[inlineFlag],{value:value2}):{done:!0})),value})(spec,optionsWithDefaults)),spec},exports.findMultiplierForInteger=findMultiplierForInteger,exports.getJsoProperty=getJsoProperty,exports.grepValue=name=>({name}),exports.insertIntoArrayByInstruction=insertIntoArrayByInstruction,exports.isDefaultValue=function isDefaultValue(jso,key,defaultFlag){if(!defaultFlag)return!1;const defaults=getJsoProperty(jso,defaultFlag),defaultType=null==defaults?void 0:defaults[key];return!!defaultType&&("pure"===defaultType||"synthetic"===defaultType)},exports.isPossibleRawJsonSchema=isPossibleRawJsonSchema,exports.isPureRefNode=isPureRefNode,exports.isRefNode=isRefNode,exports.matchPaths=matchPaths,exports.mergeOrigins=mergeOrigins,exports.normalize=(value,options={})=>{const optionsWithDefaults=createOptionsWithDefaults(options);let spec=value;return(optionsWithDefaults.resolveRef||!optionsWithDefaults.originsAlreadyDefined&&optionsWithDefaults.originsFlag)&&(spec=defineOriginsAndResolveRef(spec,optionsWithDefaults)),optionsWithDefaults.validate&&(spec=((value,options)=>{const spec=resolveSpec(value),internalOptions={...options,ignoreSymbols:new Set([...(null==options?void 0:options.originsFlag)?[null==options?void 0:options.originsFlag]:[],...(null==options?void 0:options.inlineRefsFlag)?[null==options?void 0:options.inlineRefsFlag]:[],...(null==options?void 0:options.syntheticTitleFlag)?[null==options?void 0:options.syntheticTitleFlag]:[],...(null==options?void 0:options.syntheticAllOfFlag)?[null==options?void 0:options.syntheticAllOfFlag]:[]])},cycledJsoHandlerHook=createCycledJsoHandlerHook(),propertiesToCleanup=[],result=qubershipApihubJsonCrawl.syncClone(value,[cycledJsoHandlerHook,createValidationHook(internalOptions)],{rules:RULES[spec.type]||{},state:{ignoreTreeUnderSymbols:!1,propertiesToCleanup}});return qubershipApihubJsonCrawl.isObject(result)&&cleanSeveralOrigins(result,propertiesToCleanup,internalOptions.originsFlag),result})(spec,optionsWithDefaults)),optionsWithDefaults.mergeAllOf&&(spec=((value,options)=>{const spec=resolveSpec(value);if(spec.type===SPEC_TYPE_GRAPH_API)return value;const internalMergeOptions={resolveRef:!0,originsAlreadyDefined:!1,mergeAllOf:!0,...options,syntheticMetaDefinitions:createSyntheticMetaDefinitions(spec.type,null==options?void 0:options.originsFlag),evaluationCacheService:createEvaluationCacheService(),spreadAllOfCache:createPropertySpreadWithCacheService("allOf"),liftCombiners:(null==options?void 0:options.liftCombiners)??!1,ignoreSymbols:new Set([...(null==options?void 0:options.originsFlag)?[options.originsFlag]:[],...(null==options?void 0:options.inlineRefsFlag)?[options.inlineRefsFlag]:[],...(null==options?void 0:options.syntheticTitleFlag)?[options.syntheticTitleFlag]:[],...(null==options?void 0:options.syntheticAllOfFlag)?[options.syntheticAllOfFlag]:[],...(null==options?void 0:options.ignoreSymbols)?options.ignoreSymbols:[]])},cycledJsoHandlerHook=createCycledJsoHandlerHook(),liftCombinersHook=createLiftCombinersHook(internalMergeOptions);return qubershipApihubJsonCrawl.syncClone(value,[cycledJsoHandlerHook,createAllOfResolverHook(internalMergeOptions),cycledJsoHandlerHook,...internalMergeOptions.liftCombiners?[liftCombinersHook]:[],createSelfOriginsCloneHook(internalMergeOptions.originsFlag)],{rules:RULES[spec.type]||{},state:{ignoreTreeUnderSymbols:!1,selfOriginResolver:()=>[]}})})(spec,optionsWithDefaults)),optionsWithDefaults.unify&&(spec=((value,options)=>unifyImpl(value,!1,options))(spec,optionsWithDefaults)),!optionsWithDefaults.mergeAllOf||optionsWithDefaults.unify||optionsWithDefaults.allowNotValidSyntheticChanges||(spec=((value,options)=>unifyImpl(value,!0,options))(spec,optionsWithDefaults)),optionsWithDefaults.removeOasExtensions&&(spec=((value,options)=>{const internalOptions={...options},spec=resolveSpec(value);if(spec.type===SPEC_TYPE_GRAPH_API)return value;const cycledJsoHandlerHook=createCycledJsoHandlerHook();return qubershipApihubJsonCrawl.syncClone(value,[cycledJsoHandlerHook,createRemoveOasExtensionsHook(internalOptions)],{rules:RULES[spec.type]})})(spec,optionsWithDefaults)),optionsWithDefaults.hashFlag&&(spec=((value,options)=>{const internalOptions={...options};if(!(null==options?void 0:options.hashFlag))return value;const spec=resolveSpec(value);return spec.type===SPEC_TYPE_GRAPH_API||qubershipApihubJsonCrawl.syncCrawl(value,[createHashScannerHook(internalOptions)],{rules:RULES[spec.type]}),value})(spec,optionsWithDefaults)),spec},exports.parsePointer=parsePointer,exports.parseRef=parseRef,exports.pathItemToFullPath=pathItemToFullPath,exports.pathMask=pathMask,exports.removeDuplicatesWithMergeOrigins=removeDuplicatesWithMergeOrigins,exports.replaceValue=replaceValue,exports.resolveOrigins=resolveOrigins,exports.resolveOriginsMetaRecord=resolveOriginsMetaRecord,exports.resolveSpec=resolveSpec,exports.resolveValueByPath=resolveValueByPath,exports.selfMetaResolverFactory=selfMetaResolverFactory,exports.setJsoProperty=setJsoProperty,exports.setOrigins=setOrigins,exports.setOriginsForArray=setOriginsForArray,exports.singleOrArrayToArray=singleOrArrayToArray,exports.startFromOpenApiComponents=startFromOpenApiComponents,exports.stringifyCyclicJso=stringifyCyclicJso,exports.stringifyCyclicJsoWithOrigins=function stringifyCyclicJsoWithOrigins(jso,originsFlag,addInstances=!1){const instanceMap=new Map;return stringifyCyclicJso(jso,{filter:(_,key)=>"symbol"!=typeof key,pairExtraInfo:(jso2,key)=>{const record=getJsoProperty(jso2,originsFlag);if(!record)return"missing origins record";const origins=record[key];return origins?0!==origins.length?stringifyOrigins(origins,instanceMap,addInstances).join(", "):"<empty>":`missing origins for property '${key.toString()}'`},jsoExtraInfo:jso2=>{const record=getJsoProperty(jso2,originsFlag),keys=new Set(Object.keys(jso2));if(!record&&keys.size>0)return"missing origins record";const extraKeys=Object.keys(record??{}).filter((key=>!keys.has(key)));return 0===extraKeys.length?"":`found extra origins: ${extraKeys.map((key=>`[${key}]=${stringifyOrigins(record[key],instanceMap,addInstances)}`)).join("; ")}`}})},exports.typeOf=value=>Array.isArray(value)?"array":null===value?"null":typeof value,exports.uniqueItems=uniqueItems}}]);